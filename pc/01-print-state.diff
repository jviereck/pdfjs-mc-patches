# HG changeset patch
# Parent b03be6810665e65c850aaa92132399febf89fe49

diff --git a/content/html/content/public/nsHTMLCanvasElement.h b/content/html/content/public/nsHTMLCanvasElement.h
--- a/content/html/content/public/nsHTMLCanvasElement.h
+++ b/content/html/content/public/nsHTMLCanvasElement.h
@@ -51,16 +51,17 @@
 #include "nsICanvasRenderingContextInternal.h"
 #include "nsICanvasElementExternal.h"
 #include "nsIDOMCanvasRenderingContext2D.h"
 #include "nsLayoutUtils.h"
 
 #include "Layers.h"
 
 class nsIDOMFile;
+class nsCanvasPrintState;
 
 class nsHTMLCanvasElement : public nsGenericHTMLElement,
                             public nsICanvasElementExternal,
                             public nsIDOMHTMLCanvasElement
 {
   typedef mozilla::layers::CanvasLayer CanvasLayer;
   typedef mozilla::layers::LayerManager LayerManager;
 
@@ -200,24 +201,25 @@ protected:
                             nsICanvasRenderingContextInternal **aContext);
 
   nsString mCurrentContextId;
 
   bool mIsReadyToPrint;
 
   nsCOMPtr<nsIPrintCallback> mPrintCallback;
   nsCOMPtr<nsICanvasRenderingContextInternal> mCurrentContext;
-  
 public:
   // Record whether this canvas should be write-only or not.
   // We set this when script paints an image from a different origin.
   // We also transitively set it when script paints a canvas which
   // is itself write-only.
   bool                     mWriteOnly;
 
   bool mIsPrintCanvas;
   bool mIsPrintPreview;
 
   bool HandlePrintCallback();
 
+  nsCOMPtr<nsCanvasPrintState> mPrintState;
+  void CallPrintCallback();
 };
 
 #endif /* nsHTMLCanvasElement_h__ */
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -56,33 +56,90 @@
 #include "nsFrameManager.h"
 #include "nsDisplayList.h"
 #include "ImageLayers.h"
 #include "BasicLayers.h"
 #include "imgIEncoder.h"
 
 #include "nsIWritablePropertyBag2.h"
 
+#include "nsIDOMHTMLCanvasElement.h"
+
 #define DEFAULT_CANVAS_WIDTH 300
 #define DEFAULT_CANVAS_HEIGHT 150
 
 using namespace mozilla;
 using namespace mozilla::dom;
 using namespace mozilla::layers;
 
+#define NS_ICANVASPRINTSTATE_IID \
+   {0x8d5fb8a0, 0x7782, 0x11e1, { 0xb0, 0xc4, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x67 }} 
+
+class nsCanvasPrintState : public nsICanvasPrintState
+{
+public:
+  NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICANVASPRINTSTATE_IID)
+
+  nsCanvasPrintState(nsICanvasRenderingContextInternal *aContext)
+      : mIsDone(false), mContext(aContext)
+  {
+  }
+
+  NS_IMETHOD GetContext(nsISupports **context)
+  {
+    printf("=== GetContext\n");
+    NS_ADDREF(*context = mContext);
+    return NS_OK;
+  }
+
+  NS_IMETHOD Done()
+  {
+    mIsDone = true;
+    return NS_OK;
+  }
+
+  bool mIsDone;
+  
+  NS_DECL_ISUPPORTS
+private:
+  ~nsCanvasPrintState() 
+  {
+  }
+
+  nsCOMPtr<nsICanvasRenderingContextInternal> mContext;
+protected:
+  /* additional members */
+};
+
+NS_DEFINE_STATIC_IID_ACCESSOR(nsCanvasPrintState, NS_ICANVASPRINTSTATE_IID) 
+
+NS_IMPL_ADDREF(nsCanvasPrintState)
+NS_IMPL_RELEASE(nsCanvasPrintState)
+
+DOMCI_DATA(CanvasPrintState, nsCanvasPrintState)
+
+NS_INTERFACE_MAP_BEGIN(nsCanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsCanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsICanvasPrintState)
+  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+// ---------------------------------------------------------------------------
+
 nsGenericHTMLElement*
 NS_NewHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo,
                         FromParser aFromParser)
 {
   return new nsHTMLCanvasElement(aNodeInfo);
 }
 
 nsHTMLCanvasElement::nsHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo)
   : nsGenericHTMLElement(aNodeInfo), mIsReadyToPrint(false), mWriteOnly(false),
-    mIsPrintCanvas(false), mIsPrintPreview(false)
+    mIsPrintCanvas(false), mIsPrintPreview(false), mPrintState(nsnull)
 {
 }
 
 nsHTMLCanvasElement::~nsHTMLCanvasElement()
 {
   mPrintCallback = NULL;
   mCurrentContext = NULL;
 }
@@ -158,21 +215,33 @@ nsHTMLCanvasElement::SetAttr(PRInt32 aNa
 bool
 nsHTMLCanvasElement::HandlePrintCallback()
 {
   if (!mIsPrintCanvas)
     return true;
 
   if (!mIsReadyToPrint) {
     mIsReadyToPrint = true;
-    mPrintCallback->Render(mCurrentContext);
+    CallPrintCallback();
+    // mPrintCallback->Render(mCurrentContext);
   }
   return true;
 }
 
+void
+nsHTMLCanvasElement::CallPrintCallback()
+{
+  // ??? Any ADD_REF magic to be done here ???
+  // mPrintState = new nsCanvasPrintState(mCurrentContext);
+  // mPrintCallback->Render(mPrintState);
+
+  nsRefPtr<nsICanvasPrintState> obj = new nsCanvasPrintState(mCurrentContext);
+  mPrintCallback->Render(obj.forget().get());  
+}
+
 nsresult
 nsHTMLCanvasElement::CopyInnerTo(nsGenericElement* aDest) const
 {
   nsresult rv = nsGenericHTMLElement::CopyInnerTo(aDest);
   NS_ENSURE_SUCCESS(rv, rv);
   if (aDest->OwnerDoc()->IsStaticDocument()) {
     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
     nsHTMLCanvasElement* self = const_cast<nsHTMLCanvasElement*>(this);
diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -1317,16 +1317,18 @@ static nsDOMClassInfoData sClassInfoData
   NS_DEFINE_CLASSINFO_DATA(CanvasGradient, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(CanvasPattern, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(TextMetrics, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(ImageData, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
+  NS_DEFINE_CLASSINFO_DATA(CanvasPrintState, nsDOMGenericSH,
+                           DOM_DEFAULT_SCRIPTABLE_FLAGS)
 
   NS_DEFINE_CLASSINFO_DATA(SmartCardEvent, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(PageTransitionEvent, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(WindowUtils, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 
@@ -3902,16 +3904,20 @@ nsDOMClassInfo::Init()
   DOM_CLASSINFO_MAP_BEGIN(TextMetrics, nsIDOMTextMetrics)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTextMetrics)
   DOM_CLASSINFO_MAP_END
 
   DOM_CLASSINFO_MAP_BEGIN(ImageData, nsIDOMImageData)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMImageData)
   DOM_CLASSINFO_MAP_END
 
+  DOM_CLASSINFO_MAP_BEGIN(CanvasPrintState, nsICanvasPrintState)
+    DOM_CLASSINFO_MAP_ENTRY(nsICanvasPrintState)
+  DOM_CLASSINFO_MAP_END
+
   DOM_CLASSINFO_MAP_BEGIN(XSLTProcessor, nsIXSLTProcessor)
     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessor)
     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessorPrivate)
   DOM_CLASSINFO_MAP_END
 
   DOM_CLASSINFO_MAP_BEGIN(XPathEvaluator, nsIDOMXPathEvaluator)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathEvaluator)
   DOM_CLASSINFO_MAP_END
diff --git a/dom/base/nsDOMClassInfoClasses.h b/dom/base/nsDOMClassInfoClasses.h
--- a/dom/base/nsDOMClassInfoClasses.h
+++ b/dom/base/nsDOMClassInfoClasses.h
@@ -348,17 +348,18 @@ DOMCI_CLASS(SVGZoomEvent)
 
 // Canvas
 DOMCI_CLASS(HTMLCanvasElement)
 DOMCI_CLASS(CanvasRenderingContext2D)
 DOMCI_CLASS(CanvasGradient)
 DOMCI_CLASS(CanvasPattern)
 DOMCI_CLASS(TextMetrics)
 DOMCI_CLASS(ImageData)
-
+DOMCI_CLASS(CanvasPrintState)
+  
 // SmartCard Events
 DOMCI_CLASS(SmartCardEvent)
   
 // PageTransition Events
 DOMCI_CLASS(PageTransitionEvent)
 
 // WindowUtils
 DOMCI_CLASS(WindowUtils)
diff --git a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
--- a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
+++ b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
@@ -51,19 +51,26 @@
  *
  * @status UNDER_DEVELOPMENT
  */
 
 interface nsIDOMFile;
 interface nsIVariant;
 interface nsIInputStreamCallback;
 
+[scriptable, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a67)]
+interface nsICanvasPrintState : nsISupports {
+  readonly attribute nsISupports context;
+
+  void done();
+};
+
 [scriptable, function, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a66)]
 interface nsIPrintCallback : nsISupports {
-  void render(in nsISupports ctx);
+  void render(in nsICanvasPrintState ctx);
 };
 
 [scriptable, uuid(5929542B-C68E-48AB-84F9-D9642DA39720)]
 interface nsIDOMHTMLCanvasElement : nsIDOMHTMLElement
 {
   attribute unsigned long width;
   attribute unsigned long height;
   attribute boolean mozOpaque;
