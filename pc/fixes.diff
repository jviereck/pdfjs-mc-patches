# HG changeset patch
# Parent b8db4aa84050ef6cd591cb8ed26c7f3efad26ff0

diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -1389,17 +1389,17 @@ nsCanvasRenderingContext2D::SetCanvasEle
     mCanvasElement = aCanvasElement;
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::GetCanvas(nsIDOMHTMLCanvasElement **canvas)
 {
-    NS_IF_ADDREF(*canvas = mCanvasElement);
+    *canvas = HTMLCanvasElement()->GetOriginalCanvas();
 
     return NS_OK;
 }
 
 //
 // state
 //
 
@@ -2160,16 +2160,17 @@ nsCanvasRenderingContext2D::ClearRect(fl
     mThebes->Fill();
 
     return RedrawUser(mThebes->GetUserPathExtent());
 }
 
 nsresult
 nsCanvasRenderingContext2D::DrawRect(const gfxRect& rect, Style style)
 {
+    printf("nsCanvasRenderingContext2D::DrawRect(\n");
     if (!EnsureSurface())
         return NS_ERROR_FAILURE;
 
     if (!FloatValidate(rect.X(), rect.Y(), rect.Width(), rect.Height()))
         return NS_OK;
 
     PathAutoSaveRestore pathSR(this);
 
@@ -4264,15 +4265,16 @@ bool
 nsCanvasRenderingContext2D::ShouldForceInactiveLayer(LayerManager *aManager)
 {
     return !aManager->CanUseCanvasLayerForSize(gfxIntSize(mWidth, mHeight));
 }
 
 void
 nsCanvasRenderingContext2D::MarkContextClean()
 {
+    printf("=== nsCanvasRenderingContext2D::MarkContextClean()\n");
     if (mInvalidateCount > 0) {
         mPredictManyRedrawCalls = mInvalidateCount > kCanvasMaxInvalidateCount;
     }
     mIsEntireFrameInvalid = false;
     mInvalidateCount = 0;
 }
 
diff --git a/content/html/content/public/nsHTMLCanvasElement.h b/content/html/content/public/nsHTMLCanvasElement.h
--- a/content/html/content/public/nsHTMLCanvasElement.h
+++ b/content/html/content/public/nsHTMLCanvasElement.h
@@ -204,16 +204,17 @@ protected:
   nsresult GetContextHelper(const nsAString& aContextId,
                             bool aForceThebes,
                             nsICanvasRenderingContextInternal **aContext);
 
   nsString mCurrentContextId;
 
   bool mIsReadyToPrint;
 
+  nsCOMPtr<nsIDOMHTMLCanvasElement> mOriginalCanvas;
   nsCOMPtr<nsIPrintCallback> mPrintCallback;
   nsCOMPtr<nsICanvasRenderingContextInternal> mCurrentContext;
   nsCOMPtr<nsCanvasPrintState> mPrintState;
 public:
   // Record whether this canvas should be write-only or not.
   // We set this when script paints an image from a different origin.
   // We also transitively set it when script paints a canvas which
   // is itself write-only.
@@ -222,11 +223,13 @@ public:
   bool mIsPrintCanvas;
   bool mIsPrintPreview;
   
   bool IsPrintCallbackDone();
 
   bool HandlePrintCallback();
 
   void CallPrintCallback();
+
+  nsIDOMHTMLCanvasElement* GetOriginalCanvas();
 };
 
 #endif /* nsHTMLCanvasElement_h__ */
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -119,46 +119,60 @@ DOMCI_DATA(CanvasPrintState, nsCanvasPri
 
 NS_INTERFACE_MAP_BEGIN(nsCanvasPrintState)
   NS_INTERFACE_MAP_ENTRY(nsCanvasPrintState)
   NS_INTERFACE_MAP_ENTRY(nsICanvasPrintState)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CanvasPrintState)
   NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
+/*
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INTERNAL(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mContext)
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
+
+NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mContext);
+NS_IMPL_CYCLE_COLLECTION_UNLINK_END
+*/
+
 // ---------------------------------------------------------------------------
 
 nsGenericHTMLElement*
 NS_NewHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo,
                         FromParser aFromParser)
 {
   return new nsHTMLCanvasElement(aNodeInfo);
 }
 
 nsHTMLCanvasElement::nsHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo)
   : nsGenericHTMLElement(aNodeInfo), mIsReadyToPrint(false),
-    mPrintState(nsnull), mWriteOnly(false),
+    mOriginalCanvas(nsnull), mPrintState(nsnull), mWriteOnly(false),
     mIsPrintCanvas(false), mIsPrintPreview(false) {
 }
 
 nsHTMLCanvasElement::~nsHTMLCanvasElement()
 {
   mPrintCallback = NULL;
   mCurrentContext = NULL;
 }
 
 NS_IMPL_CYCLE_COLLECTION_CLASS(nsHTMLCanvasElement)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsHTMLCanvasElement,
                                                   nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCurrentContext)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mPrintCallback)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mPrintState)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
 NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(nsHTMLCanvasElement,
                                                 nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mCurrentContext)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mPrintCallback)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mPrintState)
 NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 
 NS_IMPL_ADDREF_INHERITED(nsHTMLCanvasElement, nsGenericElement)
 NS_IMPL_RELEASE_INHERITED(nsHTMLCanvasElement, nsGenericElement)
 
 DOMCI_NODE_DATA(HTMLCanvasElement, nsHTMLCanvasElement)
 
 NS_INTERFACE_TABLE_HEAD_CYCLE_COLLECTION_INHERITED(nsHTMLCanvasElement)
@@ -233,55 +247,64 @@ nsHTMLCanvasElement::HandlePrintCallback
 
 void
 nsHTMLCanvasElement::CallPrintCallback()
 {
   printf("=== CE::CallPrintCallback\n");
   // ??? Any ADD_REF magic to be done here ???
   mPrintState = new nsCanvasPrintState(mCurrentContext);
   mPrintCallback->Render(mPrintState);
-
- // nsRefPtr<nsICanvasPrintState> obj = new nsCanvasPrintState(mCurrentContext);
- // mPrintCallback->Render(obj.forget().get());  
 }
 
 bool
 nsHTMLCanvasElement::IsPrintCallbackDone()
 {
   printf("=== CE:IsPrintCallbackDone\n");
   if (mPrintState == nsnull) {
     return true;
   }
 
   return mPrintState->mIsDone;
 }
 
+nsIDOMHTMLCanvasElement*
+nsHTMLCanvasElement::GetOriginalCanvas()
+{
+  if (mOriginalCanvas == nsnull) {
+    return this;
+  } else {
+    return mOriginalCanvas.get();
+  }
+}
+
 nsresult
 nsHTMLCanvasElement::CopyInnerTo(nsGenericElement* aDest) const
 {
   nsresult rv = nsGenericHTMLElement::CopyInnerTo(aDest);
   NS_ENSURE_SUCCESS(rv, rv);
   if (aDest->OwnerDoc()->IsStaticDocument()) {
     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
     nsHTMLCanvasElement* self = const_cast<nsHTMLCanvasElement*>(this);
 
     // By default, we assume this canvas will be displayed in PrintPreview.
     dest->mIsPrintPreview = true;
     dest->mPrintCallback = self->mPrintCallback;
+    dest->mOriginalCanvas = self;
+
+    nsCOMPtr<nsISupports> cxt;
+    dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
+    nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
 
     // Mark the canvas to be a "PrintCanvas" in case there is a special
     // rendering callback for printing.
     if (dest->mPrintCallback) {
       dest->mIsPrintCanvas = true;
     }
-
-    nsCOMPtr<nsISupports> cxt;
-    dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
-    nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
-    if (context2d) {
+    
+    if (context2d && !dest->mIsPrintCanvas) {
       context2d->DrawImage(self,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
     }
   }
   return rv;
 }
 
 nsChangeHint
@@ -366,29 +389,19 @@ nsHTMLCanvasElement::SetMozPrintCallback
 {
   mPrintCallback = aCallback;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsHTMLCanvasElement::GetMozPrintCallback(nsIPrintCallback** aCallback)
 {
+  NS_IF_ADDREF(*aCallback = mPrintCallback);
   return NS_OK;
 }
-/*
-NS_IMETHODIMP
-nsHTMLCanvasElement::SetMozPrintCallback(JSContext *cx, const jsval& callback)
-{
-  // Check that
-  if (JSVAL_IS_OBJECT(callback) && !JSVAL_IS_NULL(callback)) {
-    mPrintCallback = JSVAL_TO_OBJECT(callback);
-    NS_HOLD_JS_OBJECTS(this, mPrintCallback);
-  }
-}
-*/
 
 nsresult
 nsHTMLCanvasElement::ExtractData(const nsAString& aType,
                                  const nsAString& aOptions,
                                  nsIInputStream** aStream,
                                  bool& aFellBackToPNG)
 {
   // note that if we don't have a current context, the spec says we're
diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -4084,16 +4084,17 @@ nsLayoutUtils::SurfaceFromElement(dom::E
 
   if (!premultAlpha) {
     forceCopy = true;
     wantImageSurface = true;
   }
 
   // If it's a <canvas>, we may be able to just grab its internal surface
   if (nsHTMLCanvasElement* canvas = nsHTMLCanvasElement::FromContent(aElement)) {
+    printf("=== nsLayoutUtils::SurfaceFromElement - Enter Canvas\n");
     gfxIntSize size = canvas->GetSize();
 
     nsRefPtr<gfxASurface> surf;
 
     if (!forceCopy && canvas->CountContexts() == 1) {
       nsICanvasRenderingContextInternal *srcCanvas = canvas->GetContextAtIndex(0);
       rv = srcCanvas->GetThebesSurface(getter_AddRefs(surf));
 
@@ -4116,16 +4117,17 @@ nsLayoutUtils::SurfaceFromElement(dom::E
       PRUint32 flags = premultAlpha ? nsHTMLCanvasElement::RenderFlagPremultAlpha : 0;
       rv = canvas->RenderContextsExternal(ctx, gfxPattern::FILTER_NEAREST, flags);
       if (NS_FAILED(rv))
         return result;
     }
 
     // Ensure that any future changes to the canvas trigger proper invalidation,
     // in case this is being used by -moz-element()
+    printf("=== nsLayoutUtils::SurfaceFromElement - MarkContextClean\n");
     canvas->MarkContextClean();
 
     result.mSurface = surf;
     result.mSize = size;
     result.mPrincipal = aElement->NodePrincipal();
     result.mIsWriteOnly = canvas->IsWriteOnly();
 
     return result;
diff --git a/layout/generic/nsSimplePageSequence.cpp b/layout/generic/nsSimplePageSequence.cpp
--- a/layout/generic/nsSimplePageSequence.cpp
+++ b/layout/generic/nsSimplePageSequence.cpp
@@ -518,17 +518,17 @@ nsSimplePageSequenceFrame::StartPrint(ns
 
   if (mTotalPages == -1) {
     mTotalPages = totalPages;
   }
 
   return rv;
 }
 
-void GetPrintCanvasElementsInFrame(nsTArray<nsRefPtr<nsHTMLCanvasElement> >* aArr, nsIFrame* aFrame)
+void GetPrintCanvasElementsInFrame(nsIFrame* aFrame, nsTArray<nsRefPtr<nsHTMLCanvasElement> >* aArr)
 {
 
   for (nsIFrame::ChildListIterator childLists(aFrame);
     !childLists.IsDone(); childLists.Next()) {
 
     nsFrameList children = childLists.CurrentList();
     for (nsFrameList::Enumerator e(children); !e.AtEnd(); e.Next()) {
       nsIFrame* child = e.get();
@@ -545,17 +545,17 @@ void GetPrintCanvasElementsInFrame(nsTAr
         if (canvas && canvas->mIsPrintCanvas) {
           aArr->AppendElement(canvas);
           continue;
         }
       }
       // The current child is not a nsHTMLCanvasFrame OR it is but there is
       // no nsHTMLCanvasElement on it. Check if children of `child` might
       // contain a nsHTMLCanvasElement.
-      GetPrintCanvasElementsInFrame(aArr, child);
+      GetPrintCanvasElementsInFrame(child, aArr);
     }
   }
 }
 
 void
 nsSimplePageSequenceFrame::ComputePrintThisPage()
 {
   // See whether we should print this page
@@ -629,17 +629,17 @@ nsSimplePageSequenceFrame::PrePrintNextP
 
   printf("--- SPSF::PrePrintNextPage : CheckIfSetupList\n");
 
 
   // If the canvasList is null, then generate it and start the render
   // process for all the canvas.
   if (!mCurrentCanvasListSetup) {
     mCurrentCanvasListSetup = true;
-    GetPrintCanvasElementsInFrame(&mCurrentCanvasList, mCurrentPageFrame);
+    GetPrintCanvasElementsInFrame(mCurrentPageFrame, &mCurrentCanvasList);
 
     printf("=== GotCanvasList: %d \n", mCurrentCanvasList.Length()); 
 
     nsRefPtr<gfxASurface> renderingSurface;
     if (mCurrentCanvasList.Length() != 0) {
       nsresult rv = NS_OK;
 
       // Begin printing of the document
