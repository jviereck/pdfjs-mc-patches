diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -1004,4 +1004,5 @@ nsCanvasRenderingContext2D::Redraw()
     if (mIsEntireFrameInvalid)
         return NS_OK;
+
     mIsEntireFrameInvalid = true;
 
@@ -1022,5 +1023,5 @@ nsCanvasRenderingContext2D::Redraw(const
 {
     ++mInvalidateCount;
-
+  
     if (mIsEntireFrameInvalid)
         return NS_OK;
@@ -1361,5 +1362,5 @@ NS_IMETHODIMP
 nsCanvasRenderingContext2D::GetCanvas(nsIDOMHTMLCanvasElement **canvas)
 {
-    NS_IF_ADDREF(*canvas = mCanvasElement);
+    *canvas = HTMLCanvasElement()->GetOriginalCanvas();
 
     return NS_OK;
@@ -2132,4 +2133,5 @@ nsresult
 nsCanvasRenderingContext2D::DrawRect(const gfxRect& rect, Style style)
 {
+    printf("nsCanvasRenderingContext2D::DrawRect(\n");
     if (!EnsureSurface())
         return NS_ERROR_FAILURE;
@@ -4194,5 +4196,6 @@ nsCanvasRenderingContext2D::GetCanvasLay
     }
     CanvasRenderingContext2DUserData *userData = nsnull;
-    if (aBuilder->IsPaintingToWindow()) {
+
+    if (aBuilder->IsPaintingToWindow() || HTMLCanvasElement()->mIsPrintPreview) {
       // Make the layer tell us whenever a transaction finishes (including
       // the current transaction), so we can clear our invalidation state and
@@ -4237,4 +4240,5 @@ void
 nsCanvasRenderingContext2D::MarkContextClean()
 {
+    printf("=== nsCanvasRenderingContext2D::MarkContextClean()\n");
     if (mInvalidateCount > 0) {
         mPredictManyRedrawCalls = mInvalidateCount > kCanvasMaxInvalidateCount;
diff --git a/content/html/content/public/nsHTMLCanvasElement.h b/content/html/content/public/nsHTMLCanvasElement.h
--- a/content/html/content/public/nsHTMLCanvasElement.h
+++ b/content/html/content/public/nsHTMLCanvasElement.h
@@ -25,4 +25,6 @@
 
 class nsIDOMFile;
+class nsCanvasPrintState;
+class nsITimerCallback;
 
 class nsHTMLCanvasElement : public nsGenericHTMLElement,
@@ -169,6 +171,9 @@ protected:
 
   nsString mCurrentContextId;
+
+  nsCOMPtr<nsIDOMHTMLCanvasElement> mOriginalCanvas;
+  nsCOMPtr<nsIPrintCallback> mPrintCallback;
   nsCOMPtr<nsICanvasRenderingContextInternal> mCurrentContext;
-  
+  nsCOMPtr<nsCanvasPrintState> mPrintState;
 public:
   // Record whether this canvas should be write-only or not.
@@ -177,4 +182,18 @@ public:
   // is itself write-only.
   bool                     mWriteOnly;
+
+  bool mIsPrintCanvas;
+  bool mIsPrintPreview;
+  
+  bool IsPrintCallbackDone();
+  bool IsPrintCallbackAborted();
+
+  bool HandlePrintCallback();
+
+  void CallPrintCallback(nsITimerCallback *aCallback);
+
+  void ResetPrintCallback();
+
+  nsIDOMHTMLCanvasElement* GetOriginalCanvas();
 };
 
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -27,7 +27,11 @@
 #include "BasicLayers.h"
 #include "imgIEncoder.h"
+#include "nsITimer.h"
+#include "nsAsyncDOMEvent.h"
 
 #include "nsIWritablePropertyBag2.h"
 
+#include "nsIDOMHTMLCanvasElement.h"
+
 #define DEFAULT_CANVAS_WIDTH 300
 #define DEFAULT_CANVAS_HEIGHT 150
@@ -37,4 +41,98 @@ using namespace mozilla::dom;
 using namespace mozilla::layers;
 
+#define NS_ICANVASPRINTSTATE_IID \
+   {0x8d5fb8a0, 0x7782, 0x11e1, { 0xb0, 0xc4, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x67 }} 
+
+class nsCanvasPrintState : public nsICanvasPrintState
+{
+public:
+  NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICANVASPRINTSTATE_IID)
+
+
+  nsCanvasPrintState(
+      nsHTMLCanvasElement *aCanvas,
+      nsICanvasRenderingContextInternal *aContext, 
+      nsITimerCallback *aCallback)
+  : mIsDone(false), mIsAborted(false),
+    mCanvas(aCanvas), mContext(aContext), mCallback(aCallback) {
+  }
+
+  NS_IMETHOD GetContext(nsISupports **context)
+  {
+    NS_ADDREF(*context = mContext);
+    return NS_OK;
+  }
+
+  NS_IMETHOD Done()
+  {
+    Finalize(false);
+    return NS_OK;
+  }
+
+  NS_IMETHOD Abort()
+  {
+    Finalize(true);
+    (new nsAsyncDOMEvent(
+       mCanvas->GetDocument(), NS_LITERAL_STRING("printCanvasAbort"), true, true)
+    )->RunDOMEventWhenSafe();
+    return NS_OK;
+  }
+
+  void Finalize(bool aAborted)
+  {
+    if (!mIsDone) {
+      mIsDone = true;
+      mIsAborted = aAborted;
+      if (mCallback) {
+        mCallback->Notify(nsnull);
+      }
+      Reset();
+    }
+  }
+
+  bool mIsDone;
+  bool mIsAborted;
+
+  // CC
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_CLASS(nsCanvasPrintState)
+private:
+  ~nsCanvasPrintState() 
+  {
+  }
+
+protected:
+  nsRefPtr<nsHTMLCanvasElement> mCanvas;
+  nsCOMPtr<nsICanvasRenderingContextInternal> mContext;
+  nsCOMPtr<nsITimerCallback> mCallback;
+};
+
+NS_DEFINE_STATIC_IID_ACCESSOR(nsCanvasPrintState, NS_ICANVASPRINTSTATE_IID) 
+
+NS_IMPL_CYCLE_COLLECTING_ADDREF(nsCanvasPrintState)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(nsCanvasPrintState)
+
+DOMCI_DATA(CanvasPrintState, nsCanvasPrintState)
+
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(nsCanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+  NS_INTERFACE_MAP_ENTRY(nsICanvasPrintState)
+  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CanvasPrintState)
+NS_INTERFACE_MAP_END
+
+NS_IMPL_CYCLE_COLLECTION_CLASS(nsCanvasPrintState)
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR_AMBIGUOUS(mCanvas, nsIDOMHTMLCanvasElement)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mContext)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCallback)
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
+
+NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mCanvas)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mContext)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mCallback)
+NS_IMPL_CYCLE_COLLECTION_UNLINK_END
+// ---------------------------------------------------------------------------
+
 nsGenericHTMLElement*
 NS_NewHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo,
@@ -45,10 +143,12 @@ NS_NewHTMLCanvasElement(already_AddRefed
 
 nsHTMLCanvasElement::nsHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo)
-  : nsGenericHTMLElement(aNodeInfo), mWriteOnly(false)
-{
+  : nsGenericHTMLElement(aNodeInfo), 
+    mOriginalCanvas(nsnull), mPrintState(nsnull), mWriteOnly(false),
+    mIsPrintCanvas(false), mIsPrintPreview(false) {
 }
 
 nsHTMLCanvasElement::~nsHTMLCanvasElement()
 {
+  ResetPrintCallback();
 }
 
@@ -57,4 +157,6 @@ NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_
                                                   nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCurrentContext)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mPrintCallback)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mPrintState)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
@@ -62,4 +164,6 @@ NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_IN
                                                 nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mCurrentContext)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mPrintCallback)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mPrintState)
 NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 
@@ -121,4 +225,64 @@ nsHTMLCanvasElement::SetAttr(PRInt32 aNa
 }
 
+bool
+nsHTMLCanvasElement::HandlePrintCallback()
+{
+  // If the canvas is a printCanvas and the printing target is real paper,
+  // then the canvas is setup in nsSimplePageSequence::PrePagePrintNext().
+  if (mPrintState || !mIsPrintCanvas || !mIsPrintPreview) {
+    return true;
+  }
+
+  CallPrintCallback(nsnull);
+  return true;
+}
+
+void
+nsHTMLCanvasElement::CallPrintCallback(nsITimerCallback *aCallback)
+{
+  // ??? Any ADD_REF magic to be done here ???
+  mPrintState = new nsCanvasPrintState(this, mCurrentContext, aCallback);
+  mPrintCallback->Render(mPrintState);
+}
+
+void
+nsHTMLCanvasElement::ResetPrintCallback()
+{
+  if (mPrintState) {
+    mPrintState->Reset();
+    mPrintState = nsnull;
+  }
+}
+
+bool
+nsHTMLCanvasElement::IsPrintCallbackDone()
+{
+  if (mPrintState == nsnull) {
+    return true;
+  }
+
+  return mPrintState->mIsDone;
+}
+
+bool
+nsHTMLCanvasElement::IsPrintCallbackAborted()
+{
+  if (mPrintState == nsnull) {
+    return false;
+  }
+
+  return mPrintState->mIsAborted;
+}
+
+nsIDOMHTMLCanvasElement*
+nsHTMLCanvasElement::GetOriginalCanvas()
+{
+  if (mOriginalCanvas == nsnull) {
+    return this;
+  } else {
+    return mOriginalCanvas.get();
+  }
+}
+
 nsresult
 nsHTMLCanvasElement::CopyInnerTo(nsGenericElement* aDest) const
@@ -128,9 +292,23 @@ nsHTMLCanvasElement::CopyInnerTo(nsGener
   if (aDest->OwnerDoc()->IsStaticDocument()) {
     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
+    nsHTMLCanvasElement* self = const_cast<nsHTMLCanvasElement*>(this);
+
+    // By default, we assume this canvas will be displayed in PrintPreview.
+    dest->mIsPrintPreview = true;
+    dest->mPrintCallback = self->mPrintCallback;
+    dest->mOriginalCanvas = self;
+
+    // Mark the canvas to be a "PrintCanvas" in case there is a special
+    // rendering callback for printing.
+    if (dest->mPrintCallback) {
+      dest->mIsPrintCanvas = true;
+    }
+
     nsCOMPtr<nsISupports> cxt;
     dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
     nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
-    if (context2d) {
-      context2d->DrawImage(const_cast<nsHTMLCanvasElement*>(this),
+    
+    if (context2d && !dest->mIsPrintCanvas) {
+      context2d->DrawImage(self,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
     }
@@ -216,4 +394,18 @@ nsHTMLCanvasElement::MozFetchAsStream(ns
 }
 
+NS_IMETHODIMP
+nsHTMLCanvasElement::SetMozPrintCallback(nsIPrintCallback *aCallback)
+{
+  mPrintCallback = aCallback;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsHTMLCanvasElement::GetMozPrintCallback(nsIPrintCallback** aCallback)
+{
+  NS_IF_ADDREF(*aCallback = mPrintCallback);
+  return NS_OK;
+}
+
 nsresult
 nsHTMLCanvasElement::ExtractData(const nsAString& aType,
@@ -472,5 +664,8 @@ nsHTMLCanvasElement::GetContext(const ns
   nsresult rv;
 
-  bool forceThebes = false;
+  // xxx force thebes if this is a print canvas.
+  // Remove this once the Azure backend has the right now not implemented
+  // functions for the printCanvas usecase ready.
+  bool forceThebes = mIsPrintCanvas;
 
   while (mCurrentContextId.IsEmpty()) {
diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -1302,4 +1302,6 @@ static nsDOMClassInfoData sClassInfoData
   NS_DEFINE_CLASSINFO_DATA(ImageData, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
+  NS_DEFINE_CLASSINFO_DATA(CanvasPrintState, nsDOMGenericSH,
+                           DOM_DEFAULT_SCRIPTABLE_FLAGS)
 
   NS_DEFINE_CLASSINFO_DATA(SmartCardEvent, nsDOMGenericSH,
@@ -3909,4 +3911,8 @@ nsDOMClassInfo::Init()
   DOM_CLASSINFO_MAP_END
 
+  DOM_CLASSINFO_MAP_BEGIN(CanvasPrintState, nsICanvasPrintState)
+    DOM_CLASSINFO_MAP_ENTRY(nsICanvasPrintState)
+  DOM_CLASSINFO_MAP_END
+
   DOM_CLASSINFO_MAP_BEGIN(XSLTProcessor, nsIXSLTProcessor)
     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessor)
diff --git a/dom/base/nsDOMClassInfoClasses.h b/dom/base/nsDOMClassInfoClasses.h
--- a/dom/base/nsDOMClassInfoClasses.h
+++ b/dom/base/nsDOMClassInfoClasses.h
@@ -323,5 +323,6 @@ DOMCI_CLASS(CanvasPattern)
 DOMCI_CLASS(TextMetrics)
 DOMCI_CLASS(ImageData)
-
+DOMCI_CLASS(CanvasPrintState)
+  
 // SmartCard Events
 DOMCI_CLASS(SmartCardEvent)
diff --git a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
--- a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
+++ b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
@@ -25,4 +25,17 @@ interface nsIVariant;
 interface nsIInputStreamCallback;
 
+[scriptable, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a67)]
+interface nsICanvasPrintState : nsISupports {
+  readonly attribute nsISupports context;
+
+  void done();
+  void abort();
+};
+
+[scriptable, function, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a66)]
+interface nsIPrintCallback : nsISupports {
+  void render(in nsICanvasPrintState ctx);
+};
+
 [scriptable, uuid(5929542B-C68E-48AB-84F9-D9642DA39720)]
 interface nsIDOMHTMLCanvasElement : nsIDOMHTMLElement
@@ -57,4 +70,6 @@ interface nsIDOMHTMLCanvasElement : nsID
   void mozFetchAsStream(in nsIInputStreamCallback callback,
                                         [optional] in DOMString type);
+
+  attribute nsIPrintCallback mozPrintCallback;
 };
 
diff --git a/gfx/layers/Layers.h b/gfx/layers/Layers.h
--- a/gfx/layers/Layers.h
+++ b/gfx/layers/Layers.h
@@ -1318,4 +1318,5 @@ public:
   void SetDidTransactionCallback(DidTransactionCallback aCallback, void* aClosureData)
   {
+    printf("=== CanvasLayer::SetDidTransactionCallback\n");
     mCallback = aCallback;
     mCallbackData = aClosureData;
@@ -1348,5 +1349,7 @@ protected:
     : Layer(aManager, aImplData),
       mCallback(nsnull), mCallbackData(nsnull), mFilter(gfxPattern::FILTER_GOOD),
-      mDirty(false) {}
+      mDirty(false) {
+    printf("=== CanvasLayer::CanvasLayer aka. INIT\n");
+  }
 
   virtual nsACString& PrintInfo(nsACString& aTo, const char* aPrefix);
diff --git a/layout/generic/nsHTMLCanvasFrame.cpp b/layout/generic/nsHTMLCanvasFrame.cpp
--- a/layout/generic/nsHTMLCanvasFrame.cpp
+++ b/layout/generic/nsHTMLCanvasFrame.cpp
@@ -262,4 +262,7 @@ nsHTMLCanvasFrame::BuildLayer(nsDisplayL
   nsIntSize canvasSize = GetCanvasSize();
 
+  if (!element->HandlePrintCallback())
+    return nsnull;
+
   if (canvasSize.width <= 0 || canvasSize.height <= 0 || area.IsEmpty())
     return nsnull;
@@ -277,4 +280,7 @@ nsHTMLCanvasFrame::BuildLayer(nsDisplayL
                       presContext->AppUnitsToGfxUnits(area.height));
 
+  printf("=== nsHTMLCanvasFrame::BuildLayer r=(%2.2f, %2.2f, %2.2f, %2.2f)\n",
+    r.x, r.y, r.width, r.height);
+
   // Transform the canvas into the right place
   gfxMatrix transform;
diff --git a/layout/generic/nsIPageSequenceFrame.h b/layout/generic/nsIPageSequenceFrame.h
--- a/layout/generic/nsIPageSequenceFrame.h
+++ b/layout/generic/nsIPageSequenceFrame.h
@@ -11,4 +11,5 @@
 class nsPresContext;
 class nsIPrintSettings;
+class nsITimerCallback;
 
 /**
@@ -39,5 +40,8 @@ public:
                         PRUnichar* aDocTitle,
                         PRUnichar* aDocURL) = 0;
+
+  NS_IMETHOD PrePrintNextPage(nsITimerCallback *aCallback, bool *aDone, bool *aAborted) = 0;
   NS_IMETHOD PrintNextPage() = 0;
+  NS_IMETHOD ResetPrintCanvasList() = 0;
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum) = 0;
   NS_IMETHOD GetNumPages(PRInt32* aNumPages) = 0;
diff --git a/layout/generic/nsSimplePageSequence.cpp b/layout/generic/nsSimplePageSequence.cpp
--- a/layout/generic/nsSimplePageSequence.cpp
+++ b/layout/generic/nsSimplePageSequence.cpp
@@ -19,4 +19,6 @@
 #include "nsDisplayList.h"
 #include "mozilla/Preferences.h"
+#include "nsHTMLCanvasFrame.h"
+#include "nsHTMLCanvasElement.h"
 
 // DateTime Includes
@@ -83,6 +85,8 @@ nsSimplePageSequenceFrame::nsSimplePageS
   nsContainerFrame(aContext),
   mTotalPages(-1),
+  mCurrentCanvasListSetup(false),
   mSelectionHeight(-1),
-  mYSelOffset(0)
+  mYSelOffset(0),
+  mCalledBeginPage(false)
 {
   nscoord halfInch = PresContext()->CSSTwipsToAppUnits(NS_INCHES_TO_TWIPS(0.5));
@@ -488,21 +492,41 @@ nsSimplePageSequenceFrame::StartPrint(ns
 }
 
-NS_IMETHODIMP
-nsSimplePageSequenceFrame::PrintNextPage()
+void GetPrintCanvasElementsInFrame(nsIFrame* aFrame, nsTArray<nsRefPtr<nsHTMLCanvasElement> >* aArr)
 {
-  // Print each specified page
-  // pageNum keeps track of the current page and what pages are printing
-  //
-  // printedPageNum keeps track of the current page number to be printed
-  // Note: When print al the pages or a page range the printed page shows the
-  // actual page number, when printing selection it prints the page number starting
-  // with the first page of the selection. For example if the user has a 
-  // selection that starts on page 2 and ends on page 3, the page numbers when
-  // print are 1 and then two (which is different than printing a page range, where
-  // the page numbers would have been 2 and then 3)
 
-  if (mCurrentPageFrame == nsnull) {
-    return NS_ERROR_FAILURE;
+  for (nsIFrame::ChildListIterator childLists(aFrame);
+    !childLists.IsDone(); childLists.Next()) {
+
+    nsFrameList children = childLists.CurrentList();
+    for (nsFrameList::Enumerator e(children); !e.AtEnd(); e.Next()) {
+      nsIFrame* child = e.get();
+
+      // Check if child is a nsHTMLCanvasFrame.
+      nsHTMLCanvasFrame *canvasFrame = do_QueryFrame(child);
+
+      // If there is a canvasFrame, try to get actual canvas element.
+      if (canvasFrame) {
+        nsHTMLCanvasElement *canvas =
+          nsHTMLCanvasElement::FromContent(canvasFrame->GetContent());
+          // CanvasElementFromContent(canvasFrame->GetContent());
+
+        if (canvas && canvas->mIsPrintCanvas) {
+          aArr->AppendElement(canvas);
+          continue;
+        }
+      }
+      // The current child is not a nsHTMLCanvasFrame OR it is but there is
+      // no nsHTMLCanvasElement on it. Check if children of `child` might
+      // contain a nsHTMLCanvasElement.
+      GetPrintCanvasElementsInFrame(child, aArr);
+    }
   }
+}
+
+void
+nsSimplePageSequenceFrame::DetermineWhetherToPrintPage()
+{
+  // See whether we should print this page
+  mPrintThisPage = true;
 
   bool printEvenPages, printOddPages;
@@ -510,12 +534,4 @@ nsSimplePageSequenceFrame::PrintNextPage
   mPageData->mPrintSettings->GetPrintOptions(nsIPrintSettings::kPrintOddPages, &printOddPages);
 
-  // Begin printing of the document
-  nsDeviceContext *dc = PresContext()->DeviceContext();
-
-  nsresult rv = NS_OK;
-
-  // See whether we should print this page
-  mPrintThisPage = true;
-
   // If printing a range of pages check whether the page number is in the
   // range of pages to print
@@ -526,5 +542,6 @@ nsSimplePageSequenceFrame::PrintNextPage
       mPageNum++;
       mCurrentPageFrame = nsnull;
-      return NS_OK;
+      mPrintThisPage = false;
+      return;
     } else {
       PRInt32 length = mPageRanges.Length();
@@ -559,6 +576,168 @@ nsSimplePageSequenceFrame::PrintNextPage
     mPrintThisPage = true;
   }
+}
+
+NS_IMETHODIMP
+nsSimplePageSequenceFrame::PrePrintNextPage(nsITimerCallback *aCallback, bool* aDone, bool* aAborted)
+{
+  *aAborted = false;
+  printf("--- SPSF::PrePrintNextPage : ENTER\n");
+  if (mCurrentPageFrame == nsnull) {
+    *aDone = true;
+    return NS_ERROR_FAILURE;
+  }
+  
+  DetermineWhetherToPrintPage();
+  // Nothing to do if the current page doesn't get printed OR rendering to
+  // preview. For preview, the `CallPrintCallback` is called from within the
+  // nsHTMLCanvasElement::HandlePrintCallback.
+  if (!mPrintThisPage || !PresContext()->IsRootPaginatedDocument()) {
+    *aDone = true;
+    return NS_OK;
+  }
+
+  printf("--- SPSF::PrePrintNextPage : CheckIfSetupList\n");
+
+
+  // If the canvasList is null, then generate it and start the render
+  // process for all the canvas.
+  if (!mCurrentCanvasListSetup) {
+    mCurrentCanvasListSetup = true;
+    GetPrintCanvasElementsInFrame(mCurrentPageFrame, &mCurrentCanvasList);
+
+    printf("=== GotCanvasList: %d \n", mCurrentCanvasList.Length()); 
+
+    nsRefPtr<gfxASurface> renderingSurface;
+    if (mCurrentCanvasList.Length() != 0) {
+      nsresult rv = NS_OK;
+
+      // Begin printing of the document
+      nsDeviceContext *dc = PresContext()->DeviceContext();
+      printf("=== Begin Page ===\n");
+      PR_PL(("\n"));
+      PR_PL(("***************** BeginPage *****************\n"));
+      rv = dc->BeginPage();
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      mCalledBeginPage = true;
+      
+      nsRefPtr<nsRenderingContext> renderingContext;
+      dc->CreateRenderingContext(*getter_AddRefs(renderingContext));
+      NS_ENSURE_TRUE(renderingContext, NS_ERROR_OUT_OF_MEMORY);
+
+      renderingSurface =
+          renderingContext->ThebesContext()->CurrentSurface();
+      NS_ENSURE_TRUE(renderingSurface, NS_ERROR_OUT_OF_MEMORY);
+    }
+
+    for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
+      nsHTMLCanvasElement *canvas = mCurrentCanvasList[i];
+      nsIntSize size = canvas->GetSize();
+
+      nsRefPtr<gfxASurface> printSurface = renderingSurface->
+         CreateSimilarSurface(
+           gfxASurface::CONTENT_COLOR_ALPHA,
+           size
+         );
+
+      nsICanvasRenderingContextInternal *ctx = canvas->GetContextAtIndex(0);
+
+      if (!ctx)
+        continue;
+
+        // Initialize the context with the new printSurface.
+      ctx->InitializeWithSurface(NULL, printSurface, size.width, size.height);
+
+      // This canvas is not intended for preview. 
+      canvas->mIsPrintPreview = false;
+
+      // Start the rendering process.
+      canvas->CallPrintCallback(aCallback);
+      printf(">>> Context: setup!\n");
+    }
+  }
+
+  PRInt32 doneCounter = 0;
+  for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
+    nsHTMLCanvasElement *canvas = mCurrentCanvasList[i];
+
+    if (canvas->IsPrintCallbackAborted()) {
+      *aDone = true;
+      *aAborted = true;
+      printf("!!! nsSimplePageSequenceFrame::PrePrintNextPage(...) - ABORTED!\n");
+      
+      // Reset all print-callback objects. Otherwise they might be able to
+      // call aCallback->Notify again, but the print logic expect this not to
+      // happen.
+      ResetPrintCanvasList();
+      return NS_OK;
+    } else if (canvas->IsPrintCallbackDone()) {
+      doneCounter++;
+    }
+  }
+
+  // If all canvas have finished rendering, return true, otherwise false.
+  *aDone = doneCounter == mCurrentCanvasList.Length();
+
+  return NS_OK;
+}
+
+void
+nsSimplePageSequenceFrame::InvalidateInternal(const nsRect& aDamageRect,
+                                  nscoord aX, nscoord aY, nsIFrame* aForChild,
+                                  PRUint32 aFlags)
+{
+  printf("=== nsSimplePageSequenceFrame:;InvalidateInternal\n");
+  // xxx Invalidate the entire frame as otherwise invalidate of printCanvas
+  // don't work properly. This is hopefully no longer necessary once 539356
+  // lands.
+  nsContainerFrame::InvalidateInternal(
+      nsRect(nsPoint(0,0), GetSize()), 0, 0, aForChild, aFlags); 
+}
+
+NS_IMETHODIMP
+nsSimplePageSequenceFrame::ResetPrintCanvasList()
+{
+  for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
+    nsHTMLCanvasElement *canvas = mCurrentCanvasList[i];
+    nsICanvasRenderingContextInternal *ctx = canvas->GetContextAtIndex(0);
+
+    if (ctx)
+      ctx->Reset();
+
+    canvas->ResetPrintCallback();
+  }
+
+  mCurrentCanvasList.Clear();
+  mCurrentCanvasListSetup = false; 
+  return NS_OK;
+} 
+
+NS_IMETHODIMP
+nsSimplePageSequenceFrame::PrintNextPage()
+{
+// Print each specified page
+// pageNum keeps track of the current page and what pages are printing
+//
+// printedPageNum keeps track of the current page number to be printed
+// Note: When print al the pages or a page range the printed page shows the
+// actual page number, when printing selection it prints the page number starting
+// with the first page of the selection. For example if the user has a 
+// selection that starts on page 2 and ends on page 3, the page numbers when
+// print are 1 and then two (which is different than printing a page range, where
+// the page numbers would have been 2 and then 3)
+
+  if (mCurrentPageFrame == nsnull) {
+    return NS_ERROR_FAILURE;
+  }
+
+  nsresult rv = NS_OK;
+
+  DetermineWhetherToPrintPage();
 
   if (mPrintThisPage) {
+    // Begin printing of the document
+    nsDeviceContext *dc = PresContext()->DeviceContext();
+
     // XXX This is temporary fix for printing more than one page of a selection
     // This does a poor man's "dump" pagination (see Bug 89353)
@@ -587,9 +766,15 @@ nsSimplePageSequenceFrame::PrintNextPage
     PRInt32 printedPageNum = 1;
     while (continuePrinting) {
+      printf("=== LOOP:ITER ===\n");
       if (PresContext()->IsRootPaginatedDocument()) {
-        PR_PL(("\n"));
-        PR_PL(("***************** BeginPage *****************\n"));
-        rv = dc->BeginPage();
-        NS_ENSURE_SUCCESS(rv, rv);
+        if (!mCalledBeginPage) {
+          printf("=== Begin Page ===\n");
+          PR_PL(("\n"));
+          PR_PL(("***************** BeginPage *****************\n"));
+          rv = dc->BeginPage();
+          NS_ENSURE_SUCCESS(rv, rv);
+        } else {
+          mCalledBeginPage = false;
+        }
       }
 
@@ -603,4 +788,10 @@ nsSimplePageSequenceFrame::PrintNextPage
                          mCurrentPageFrame->GetSize());
       nsRegion drawingRegion(drawingRect);
+
+
+      // Replace the underlaying context off all canvas that are "printCanvas".
+      nsRefPtr<gfxASurface> renderingSurface =
+          renderingContext->ThebesContext()->CurrentSurface();
+
       nsLayoutUtils::PaintFrame(renderingContext, mCurrentPageFrame,
                                 drawingRegion, NS_RGBA(0,0,0,0),
@@ -616,4 +807,5 @@ nsSimplePageSequenceFrame::PrintNextPage
         PR_PL(("***************** End Page (PrintNextPage) *****************\n"));
         rv = dc->EndPage();
+        printf("=== End Page ===");
         NS_ENSURE_SUCCESS(rv, rv);
       } else {
@@ -621,4 +813,5 @@ nsSimplePageSequenceFrame::PrintNextPage
       }
     }
+    printf("=== LOOP:EXIT ===\n");
   }
   return rv;
@@ -635,4 +828,6 @@ nsSimplePageSequenceFrame::DoPageEnd()
   }
 
+  ResetPrintCanvasList();
+
   mPageNum++;
 
@@ -640,5 +835,5 @@ nsSimplePageSequenceFrame::DoPageEnd()
     mCurrentPageFrame = mCurrentPageFrame->GetNextSibling();
   }
-  
+
   return rv;
 }
diff --git a/layout/generic/nsSimplePageSequence.h b/layout/generic/nsSimplePageSequence.h
--- a/layout/generic/nsSimplePageSequence.h
+++ b/layout/generic/nsSimplePageSequence.h
@@ -11,4 +11,5 @@
 #include "nsIPrintOptions.h"
 #include "nsIDateTimeFormat.h"
+#include "nsHTMLCanvasElement.h"
 
 //-----------------------------------------------
@@ -77,5 +78,8 @@ public:
                         PRUnichar*        aDocTitle,
                         PRUnichar*        aDocURL);
+
+  NS_IMETHOD PrePrintNextPage(nsITimerCallback *aCallback, bool *aDone, bool *aAborted);
   NS_IMETHOD PrintNextPage();
+  NS_IMETHOD ResetPrintCanvasList();
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum);
   NS_IMETHOD GetNumPages(PRInt32* aNumPages);
@@ -95,4 +99,7 @@ public:
   virtual nsIAtom* GetType() const;
   
+  virtual void InvalidateInternal(const nsRect& aDamageRect,
+                                   nscoord aX, nscoord aY, nsIFrame* aForChild,
+                                   PRUint32 aFlags);
 #ifdef NS_DEBUG
   NS_IMETHOD  GetFrameName(nsAString& aResult) const;
@@ -119,4 +126,6 @@ protected:
                       nscoord aWidth, nscoord aHeight);
 
+  void         DetermineWhetherToPrintPage();
+
   nsMargin mMargin;
 
@@ -135,4 +144,5 @@ protected:
   PRInt32      mToPageNum;
   nsTArray<PRInt32> mPageRanges;
+  nsTArray<nsRefPtr<nsHTMLCanvasElement> > mCurrentCanvasList;
 
   // Selection Printing Info
@@ -145,4 +155,8 @@ protected:
 
   bool mIsPrintingSelection;
+  
+  bool mCalledBeginPage;
+
+  bool mCurrentCanvasListSetup;
 };
 
diff --git a/layout/printing/nsPagePrintTimer.cpp b/layout/printing/nsPagePrintTimer.cpp
--- a/layout/printing/nsPagePrintTimer.cpp
+++ b/layout/printing/nsPagePrintTimer.cpp
@@ -53,5 +53,40 @@ nsPagePrintTimer::StartTimer(bool aUseDe
 }
 
+//nsRunnable
+NS_IMETHODIMP
+nsPagePrintTimer::Run() 
+{
+  printf("=== nsPagePrintTimer::Run()\n");
+  bool initNewTimer = true;
+  // Check to see if we are done
+  // inRange will be true if a page is actually printed
+  bool inRange;
+  bool donePrinting;
 
+  printf("--- donePrePrint!\n");
+  // donePrinting will be true if it completed successfully or
+  // if the printing was cancelled
+  donePrinting = mPrintEngine->PrintPage(mPrintObj, inRange);
+  if (donePrinting) {
+    // now clean up print or print the next webshell
+    if (mPrintEngine->DonePrintingPages(mPrintObj, NS_OK)) {
+      initNewTimer = false;
+    }
+  }
+
+  // Note that the Stop() destroys this after the print job finishes
+  // (The PrintEngine stops holding a reference when DonePrintingPages
+  // returns true.)
+  Stop(); 
+  if (initNewTimer) {
+    ++mFiringCount;
+    nsresult result = StartTimer(inRange);
+    if (NS_FAILED(result)) {
+      donePrinting = true;     // had a failure.. we are finished..
+      mPrintEngine->SetIsPrinting(false);
+    }
+  }
+  return NS_OK;
+};
 
 // nsITimerCallback
@@ -60,30 +95,10 @@ nsPagePrintTimer::Notify(nsITimer *timer
 {
   if (mDocViewerPrint) {
-    bool initNewTimer = true;
-    // Check to see if we are done
-    // inRange will be true if a page is actually printed
-    bool inRange;
-    // donePrinting will be true if it completed successfully or
-    // if the printing was cancelled
-    bool donePrinting = mPrintEngine->PrintPage(mPrintObj, inRange);
-    if (donePrinting) {
-      // now clean up print or print the next webshell
-      if (mPrintEngine->DonePrintingPages(mPrintObj, NS_OK)) {
-        initNewTimer = false;
-      }
+    bool donePrePrint = mPrintEngine->PrePrintPage();
+
+    if (donePrePrint) {
+      NS_DispatchToMainThread(this);
     }
 
-    // Note that the Stop() destroys this after the print job finishes
-    // (The PrintEngine stops holding a reference when DonePrintingPages
-    // returns true.)
-    Stop(); 
-    if (initNewTimer) {
-      ++mFiringCount;
-      nsresult result = StartTimer(inRange);
-      if (NS_FAILED(result)) {
-        donePrinting = true;     // had a failure.. we are finished..
-        mPrintEngine->SetIsPrinting(false);
-      }
-    }
   }
   return NS_OK;
diff --git a/layout/printing/nsPagePrintTimer.h b/layout/printing/nsPagePrintTimer.h
--- a/layout/printing/nsPagePrintTimer.h
+++ b/layout/printing/nsPagePrintTimer.h
@@ -11,4 +11,5 @@
 #include "nsIDocumentViewerPrint.h"
 #include "nsPrintObject.h"
+#include "nsThreadUtils.h"
 
 class nsPrintEngine;
@@ -17,5 +18,6 @@ class nsPrintEngine;
 //-- Page Timer Class
 //---------------------------------------------------
-class nsPagePrintTimer : public nsITimerCallback
+class nsPagePrintTimer : public nsITimerCallback,
+                         public nsRunnable
 {
 public:
@@ -34,4 +36,6 @@ public:
   nsresult Start(nsPrintObject* aPO);
 
+  NS_IMETHOD Run();
+
   void Stop();
 
diff --git a/layout/printing/nsPrintData.cpp b/layout/printing/nsPrintData.cpp
--- a/layout/printing/nsPrintData.cpp
+++ b/layout/printing/nsPrintData.cpp
@@ -62,4 +62,6 @@ nsPrintData::nsPrintData(ePrintDataType 
 nsPrintData::~nsPrintData()
 {
+  printf("=== nsPrintData::~nsPrintData()\n");
+
   MOZ_COUNT_DTOR(nsPrintData);
   // remove the event listeners
diff --git a/layout/printing/nsPrintEngine.cpp b/layout/printing/nsPrintEngine.cpp
--- a/layout/printing/nsPrintEngine.cpp
+++ b/layout/printing/nsPrintEngine.cpp
@@ -2400,4 +2400,52 @@ nsPrintEngine::ElipseLongString(PRUnicha
 //-------------------------------------------------------
 bool
+nsPrintEngine::PrePrintPage()
+{
+  NS_ASSERTION(mPageSeqFrame,  "mPageSeqFrame is null!");
+  NS_ASSERTION(mPrt,           "mPrt is null!");
+
+  // Although these should NEVER be NULL
+  // This is added insurance, to make sure we don't crash in optimized builds
+  if (!mPrt || !mPageSeqFrame) {
+    return true; // means we are done preparing the page.
+  }
+
+  // Check setting to see if someone request it be cancelled
+  bool isCancelled = false;
+  mPrt->mPrintSettings->GetIsCancelled(&isCancelled);
+  if (isCancelled)
+    return true;
+
+  // Ask mPageSeqFrame if the page is ready to be printed.
+  // If the page doesn't get printed at all, the |done| will be |true|.
+  // |aborted| is set to true iff |printState.aborted()| was called on one of
+  // the printCanvas.
+  bool done = false;
+  bool aborted = false;
+  nsresult rv = mPageSeqFrame->PrePrintNextPage(mPagePrintTimer, &done, &aborted);
+  if (NS_FAILED(rv)) {
+    printf("nsPrintEngine::PrePrintPage() - ERROR!\n");
+    // ??? ::PrintPage doesn't set |mPrt->mIsAborted = true| if rv != NS_ERROR_ABORT,
+    // but I don't really understand why this should be the right thing to do?
+    // Shouldn't |mPrt->mIsAborted| set to true all the time if something
+    // wents wrong?
+    if (rv != NS_ERROR_ABORT) {
+      ShowPrintErrorDialog(rv);
+      mPrt->mIsAborted = true;
+    }
+    done = true;
+  }
+  // If the printCallback was aborted, then set the isAborted flag, but don't
+  // show any error message. It's the developer's job to show/design the user
+  // some error message.
+  if (aborted) {
+    printf("nsPrintEngine::PrePrintPage() - ABORTED!\n");
+    mPrt->mIsAborted = true;
+    done = true;
+  }
+  return done;
+}
+
+bool
 nsPrintEngine::PrintPage(nsPrintObject*    aPO,
                          bool&           aInRange)
@@ -2420,5 +2468,5 @@ nsPrintEngine::PrintPage(nsPrintObject* 
   bool isCancelled = false;
   mPrt->mPrintSettings->GetIsCancelled(&isCancelled);
-  if (isCancelled)
+  if (isCancelled || mPrt->mIsAborted)
     return true;
 
@@ -2805,5 +2853,12 @@ nsPrintEngine::DonePrintingPages(nsPrint
   PR_PL(("****** In DV::DonePrintingPages PO: %p (%s)\n", aPO, aPO?gFrameTypesStr[aPO->mFrameType]:""));
 
-  if (aPO != nsnull) {
+  // If there is a pageSeqFrame, make sure there are no more printCanvas active
+  // that might call |Notify| on the pagePrintTimer after things are cleaned up
+  // and printing was marked as being done.
+  if (mPageSeqFrame) {
+    mPageSeqFrame->ResetPrintCanvasList();
+  }
+
+  if (aPO != nsnull && !mPrt->mIsAborted) {
     aPO->mHasBeenPrinted = true;
     nsresult rv;
diff --git a/layout/printing/nsPrintEngine.h b/layout/printing/nsPrintEngine.h
--- a/layout/printing/nsPrintEngine.h
+++ b/layout/printing/nsPrintEngine.h
@@ -103,4 +103,5 @@ public:
 
   // nsIDocumentViewerPrint Printing Methods
+  bool     PrePrintPage();
   bool     PrintPage(nsPrintObject* aPOect, bool& aInRange);
   bool     DonePrintingPages(nsPrintObject* aPO, nsresult aResult);
diff --git a/toolkit/components/printing/content/printPreviewBindings.xml b/toolkit/components/printing/content/printPreviewBindings.xml
--- a/toolkit/components/printing/content/printPreviewBindings.xml
+++ b/toolkit/components/printing/content/printPreviewBindings.xml
@@ -197,4 +197,19 @@
       </method>
 
+      <method name="doPageSetup">
+        <body>
+        <![CDATA[
+          var didOK = PrintUtils.showPageSetup();
+          if (didOK) {
+            // the changes that effect the UI
+            this.updateToolbar();
+
+            // Now do PrintPreview
+            PrintUtils.printPreview();
+          }
+        ]]>
+        </body>
+      </method>
+
       <method name="navigate">
         <parameter name="aDirection"/>
diff --git a/toolkit/components/printing/content/printUtils.js b/toolkit/components/printing/content/printUtils.js
--- a/toolkit/components/printing/content/printUtils.js
+++ b/toolkit/components/printing/content/printUtils.js
@@ -163,4 +163,5 @@ var PrintUtils = {
   _originalTitle: "",
   _originalURL: "",
+  _exitPrintPreview: null,
 
   // This observer is called once the progress dialog has been "opened"
@@ -238,4 +239,9 @@ var PrintUtils = {
     window.addEventListener("keypress", this.onKeyPressPP, true);
 
+    // close print preview if a print canvas got aborted.
+    this._exitPrintPreview = this.exitPrintPreview.bind(this);
+    document.documentElement.addEventListener("printCanvasAbort",
+        this.exitPrintPreview, true);
+
     var browser = this._callback.getPrintPreviewBrowser();
     browser.collapsed = false;
@@ -248,4 +254,6 @@ var PrintUtils = {
   exitPrintPreview: function ()
   {
+    Components.utils.reportError("exitPrintPreview");
+
     window.removeEventListener("keypress", this.onKeyPressPP, true);
 
@@ -254,4 +262,6 @@ var PrintUtils = {
     this._closeHandlerPP = null;
 
+    document.documentElement.removeEventListener("printCanvasAbort", this.exitPrintPreview, true);
+
     var webBrowserPrint = this.getPrintPreview();
     webBrowserPrint.exitPrintPreview();
@@ -301,2 +311,5 @@ var PrintUtils = {
   }
 }
+
+// Make an explicit binding such that addEventListener/removeEventListener work.
+PrintUtils.exitPrintPreview = PrintUtils.exitPrintPreview.bind(PrintUtils);
