# HG changeset patch
# Parent ec17ee24d5e083364c06631804740f79d61ee1d7

diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -85,13 +85,14 @@
 
   NS_IMETHOD GetContext(nsISupports **context)
   {
-    printf("=== GetContext\n");
+    printf("=== GetContext2\n");
     NS_ADDREF(*context = mContext);
     return NS_OK;
   }
 
   NS_IMETHOD Done()
   {
+    printf("CPS::Done\n");
     mIsDone = true;
     return NS_OK;
   }
@@ -215,11 +216,15 @@
 bool
 nsHTMLCanvasElement::HandlePrintCallback(nsIntSize &size)
 {
+  printf("=== HandlePrintCallback\n");
   // If the canvas is a printCanvas and the printing target is real paper,
   // then the canvas is setup in nsSimplePageSequence::PrePagePrintNext().
-  if (!mIsPrintCanvas || !mIsPrintPreview)
+  if (!mIsPrintCanvas || !mIsPrintPreview) {
+    printf("=== handleprintcallback:early quit\n");
     return true;
+  }
 
+  printf("=== HandlePrintCallback:continue\n");
   nsresult rv;
 
   // For print preview, resize the canvas context, such that
@@ -241,17 +246,19 @@
 void
 nsHTMLCanvasElement::CallPrintCallback()
 {
+  printf("=== CE::CallPrintCallback\n");
   // ??? Any ADD_REF magic to be done here ???
-  // mPrintState = new nsCanvasPrintState(mCurrentContext);
-  // mPrintCallback->Render(mPrintState);
+  mPrintState = new nsCanvasPrintState(mCurrentContext);
+  mPrintCallback->Render(mPrintState);
 
-  nsRefPtr<nsICanvasPrintState> obj = new nsCanvasPrintState(mCurrentContext);
-  mPrintCallback->Render(obj.forget().get());  
+ // nsRefPtr<nsICanvasPrintState> obj = new nsCanvasPrintState(mCurrentContext);
+ // mPrintCallback->Render(obj.forget().get());  
 }
 
 bool
 nsHTMLCanvasElement::IsPrintCallbackDone()
 {
+  printf("=== CE:IsPrintCallbackDone\n");
   if (mPrintState == nsnull) {
     return true;
   }
diff --git a/layout/generic/nsIPageSequenceFrame.h b/layout/generic/nsIPageSequenceFrame.h
--- a/layout/generic/nsIPageSequenceFrame.h
+++ b/layout/generic/nsIPageSequenceFrame.h
@@ -70,6 +70,8 @@
                         nsIPrintSettings* aPrintOptions,
                         PRUnichar* aDocTitle,
                         PRUnichar* aDocURL) = 0;
+
+  NS_IMETHOD PrePrintNextPage(bool *aDone) = 0;
   NS_IMETHOD PrintNextPage() = 0;
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum) = 0;
   NS_IMETHOD GetNumPages(PRInt32* aNumPages) = 0;
diff --git a/layout/generic/nsSimplePageSequence.cpp b/layout/generic/nsSimplePageSequence.cpp
--- a/layout/generic/nsSimplePageSequence.cpp
+++ b/layout/generic/nsSimplePageSequence.cpp
@@ -118,7 +118,8 @@
   mTotalPages(-1),
   mCurrentCanvasListSetup(false),
   mSelectionHeight(-1),
-  mYSelOffset(0)
+  mYSelOffset(0),
+  mCalledBeginPage(false)
 {
   nscoord halfInch = PresContext()->CSSTwipsToAppUnits(NS_INCHES_TO_TWIPS(0.5));
   mMargin.SizeTo(halfInch, halfInch, halfInch, halfInch);
@@ -608,39 +609,56 @@
   }
 }
 
-bool
-nsSimplePageSequenceFrame::PrePrintNextPage()
+NS_IMETHODIMP
+nsSimplePageSequenceFrame::PrePrintNextPage(bool* aDone)
 {
+  printf("--- SPSF::PrePrintNextPage : ENTER\n");
   if (mCurrentPageFrame == nsnull) {
-    return true;
+    *aDone = true;
+    return NS_ERROR_FAILURE;
   }
   
   ComputePrintThisPage();
-  if (!mPrintThisPage) {
-    return true;
+  // Nothing to do if the current page doesn't get printed OR rendering to
+  // preview. For preview, the `CallPrintCallback` is called from within the
+  // nsHTMLCanvasElement::HandlePrintCallback.
+  if (!mPrintThisPage || !PresContext()->IsRootPaginatedDocument()) {
+    *aDone = true;
+    return NS_OK;
   }
 
+  printf("--- SPSF::PrePrintNextPage : CheckIfSetupList\n");
+
+
   // If the canvasList is null, then generate it and start the render
   // process for all the canvas.
   if (!mCurrentCanvasListSetup) {
+    mCurrentCanvasListSetup = true;
     GetPrintCanvasElementsInFrame(&mCurrentCanvasList, mCurrentPageFrame);
 
     printf("=== GotCanvasList: %d \n", mCurrentCanvasList.Length()); 
 
     nsRefPtr<gfxASurface> renderingSurface;
-    if (mCurrentCanvasList.Length() != -1) {
+    if (mCurrentCanvasList.Length() != 0) {
+      nsresult rv = NS_OK;
+
       // Begin printing of the document
       nsDeviceContext *dc = PresContext()->DeviceContext();
+      printf("=== Begin Page ===\n");
+      PR_PL(("\n"));
+      PR_PL(("***************** BeginPage *****************\n"));
+      rv = dc->BeginPage();
+      NS_ENSURE_SUCCESS(rv, rv);
 
+      mCalledBeginPage = true;
+      
       nsRefPtr<nsRenderingContext> renderingContext;
       dc->CreateRenderingContext(*getter_AddRefs(renderingContext));
-      
-      if (!renderingContext) { // Check for running-out-of-memory.
-        return true; 
-      }
+      NS_ENSURE_TRUE(renderingContext, NS_ERROR_OUT_OF_MEMORY);
 
       renderingSurface =
           renderingContext->ThebesContext()->CurrentSurface();
+      NS_ENSURE_TRUE(renderingSurface, NS_ERROR_OUT_OF_MEMORY);
     }
 
     for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
@@ -666,7 +684,7 @@
 
       // Start the rendering process.
       canvas->CallPrintCallback();
-      printf(">>> Context: setup!");
+      printf(">>> Context: setup!\n");
     }
   }
 
@@ -680,7 +698,8 @@
   }
 
   // If all canvas have finished rendering, return true, otherwise false.
-  return doneCounter == mCurrentCanvasList.Length();
+  *aDone = doneCounter == mCurrentCanvasList.Length();
+  return NS_OK;
 }
 
 NS_IMETHODIMP
@@ -735,11 +754,17 @@
 
     PRInt32 printedPageNum = 1;
     while (continuePrinting) {
+      printf("=== LOOP:ITER ===");
       if (PresContext()->IsRootPaginatedDocument()) {
-        PR_PL(("\n"));
-        PR_PL(("***************** BeginPage *****************\n"));
-        rv = dc->BeginPage();
-        NS_ENSURE_SUCCESS(rv, rv);
+        if (!mCalledBeginPage) {
+          printf("=== Begin Page ===\n");
+          PR_PL(("\n"));
+          PR_PL(("***************** BeginPage *****************\n"));
+          rv = dc->BeginPage();
+          NS_ENSURE_SUCCESS(rv, rv);
+        } else {
+          mCalledBeginPage = false;
+        }
       }
 
       PR_PL(("SeqFr::PrintNextPage -> %p PageNo: %d", pf, mPageNum));
@@ -761,17 +786,6 @@
                                 drawingRegion, NS_RGBA(0,0,0,0),
                                 nsLayoutUtils::PAINT_SYNC_DECODE_IMAGES);
 
-      // Loop over the canvasList list again and clear out the no longer
-      // needed surface and context to save memeory.
-      for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
-        nsICanvasRenderingContextInternal *ctx = mCurrentCanvasList[i]->GetContextAtIndex(0);
-
-        if (ctx)
-          ctx->Reset();
-      }
-      mCurrentCanvasList.Clear();
-      mCurrentCanvasListSetup = false; 
-
       if (mSelectionHeight >= 0 && selectionY < mSelectionHeight) {
         selectionY += height;
         printedPageNum++;
@@ -781,11 +795,13 @@
 
         PR_PL(("***************** End Page (PrintNextPage) *****************\n"));
         rv = dc->EndPage();
+        printf("=== End Page ===");
         NS_ENSURE_SUCCESS(rv, rv);
       } else {
         continuePrinting = false;
       }
     }
+    printf("=== LOOP:EXIT ===");
   }
   return rv;
 }
@@ -800,6 +816,17 @@
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
+  // Loop over the canvasList list again and clear out the no longer
+  // needed surface and context to save memeory.
+  for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
+    nsICanvasRenderingContextInternal *ctx = mCurrentCanvasList[i]->GetContextAtIndex(0);
+
+    if (ctx)
+      ctx->Reset();
+  }
+  mCurrentCanvasList.Clear();
+  mCurrentCanvasListSetup = false; 
+
   mPageNum++;
 
   if (mCurrentPageFrame) {
diff --git a/layout/generic/nsSimplePageSequence.h b/layout/generic/nsSimplePageSequence.h
--- a/layout/generic/nsSimplePageSequence.h
+++ b/layout/generic/nsSimplePageSequence.h
@@ -110,7 +110,7 @@
                         PRUnichar*        aDocTitle,
                         PRUnichar*        aDocURL);
 
-  bool PrePrintNextPage();
+  NS_IMETHOD PrePrintNextPage(bool *aDone);
   NS_IMETHOD PrintNextPage();
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum);
   NS_IMETHOD GetNumPages(PRInt32* aNumPages);
@@ -183,6 +183,8 @@
   bool mDoingPageRange;
 
   bool mIsPrintingSelection;
+  
+  bool mCalledBeginPage;
 };
 
 #endif /* nsSimplePageSequence_h___ */
diff --git a/layout/printing/nsPagePrintTimer.cpp b/layout/printing/nsPagePrintTimer.cpp
--- a/layout/printing/nsPagePrintTimer.cpp
+++ b/layout/printing/nsPagePrintTimer.cpp
@@ -96,9 +96,11 @@
     // inRange will be true if a page is actually printed
     bool inRange;
 
-    bool donePrePrint = mPrintEngine->PrePrintPage(mPrintObj);
-    
-    if (donePrePrint) { 
+    bool donePrePrint = mPrintEngine->PrePrintPage();
+    bool donePrinting;
+
+    if (donePrePrint) {
+      printf("--- donePrePrint!\n");
       // donePrinting will be true if it completed successfully or
       // if the printing was cancelled
       bool donePrinting = mPrintEngine->PrintPage(mPrintObj, inRange);
diff --git a/layout/printing/nsPrintEngine.cpp b/layout/printing/nsPrintEngine.cpp
--- a/layout/printing/nsPrintEngine.cpp
+++ b/layout/printing/nsPrintEngine.cpp
@@ -2432,7 +2432,7 @@
 
 //-------------------------------------------------------
 bool
-nsPrintEngien::PrePrintPage()
+nsPrintEngine::PrePrintPage()
 {
   NS_ASSERTION(mPageSeqFrame,  "mPageSeqFrame is null!");
   NS_ASSERTION(mPrt,           "mPrt is null!");
@@ -2452,7 +2452,9 @@
 
   // Ask mPageSeqFrame if the page is ready to be printed.
   // If the page doesn't get printed at all, the function will return true.
-  return mPageSeqFrame->PrePrintNextPage();
+  bool done = false;
+  mPageSeqFrame->PrePrintNextPage(&done);
+  return done;
 }
 
 bool
diff --git a/layout/printing/nsPrintEngine.h b/layout/printing/nsPrintEngine.h
--- a/layout/printing/nsPrintEngine.h
+++ b/layout/printing/nsPrintEngine.h
@@ -134,6 +134,7 @@
   void InstallPrintPreviewListener();
 
   // nsIDocumentViewerPrint Printing Methods
+  bool     PrePrintPage();
   bool     PrintPage(nsPrintObject* aPOect, bool& aInRange);
   bool     DonePrintingPages(nsPrintObject* aPO, nsresult aResult);
 
