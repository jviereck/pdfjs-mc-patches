# HG changeset patch
# Parent b8db4aa84050ef6cd591cb8ed26c7f3efad26ff0

diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -1389,17 +1389,17 @@ nsCanvasRenderingContext2D::SetCanvasEle
     mCanvasElement = aCanvasElement;
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::GetCanvas(nsIDOMHTMLCanvasElement **canvas)
 {
-    NS_IF_ADDREF(*canvas = mCanvasElement);
+    *canvas = HTMLCanvasElement()->GetOriginalCanvas();
 
     return NS_OK;
 }
 
 //
 // state
 //
 
@@ -2160,16 +2160,17 @@ nsCanvasRenderingContext2D::ClearRect(fl
     mThebes->Fill();
 
     return RedrawUser(mThebes->GetUserPathExtent());
 }
 
 nsresult
 nsCanvasRenderingContext2D::DrawRect(const gfxRect& rect, Style style)
 {
+    printf("nsCanvasRenderingContext2D::DrawRect(\n");
     if (!EnsureSurface())
         return NS_ERROR_FAILURE;
 
     if (!FloatValidate(rect.X(), rect.Y(), rect.Width(), rect.Height()))
         return NS_OK;
 
     PathAutoSaveRestore pathSR(this);
 
@@ -4264,15 +4265,16 @@ bool
 nsCanvasRenderingContext2D::ShouldForceInactiveLayer(LayerManager *aManager)
 {
     return !aManager->CanUseCanvasLayerForSize(gfxIntSize(mWidth, mHeight));
 }
 
 void
 nsCanvasRenderingContext2D::MarkContextClean()
 {
+    printf("=== nsCanvasRenderingContext2D::MarkContextClean()\n");
     if (mInvalidateCount > 0) {
         mPredictManyRedrawCalls = mInvalidateCount > kCanvasMaxInvalidateCount;
     }
     mIsEntireFrameInvalid = false;
     mInvalidateCount = 0;
 }
 
diff --git a/content/html/content/public/nsHTMLCanvasElement.h b/content/html/content/public/nsHTMLCanvasElement.h
--- a/content/html/content/public/nsHTMLCanvasElement.h
+++ b/content/html/content/public/nsHTMLCanvasElement.h
@@ -204,29 +204,33 @@ protected:
   nsresult GetContextHelper(const nsAString& aContextId,
                             bool aForceThebes,
                             nsICanvasRenderingContextInternal **aContext);
 
   nsString mCurrentContextId;
 
   bool mIsReadyToPrint;
 
+  nsCOMPtr<nsIDOMHTMLCanvasElement> mOriginalCanvas;
   nsCOMPtr<nsIPrintCallback> mPrintCallback;
   nsCOMPtr<nsICanvasRenderingContextInternal> mCurrentContext;
   nsCOMPtr<nsCanvasPrintState> mPrintState;
 public:
   // Record whether this canvas should be write-only or not.
   // We set this when script paints an image from a different origin.
   // We also transitively set it when script paints a canvas which
   // is itself write-only.
   bool                     mWriteOnly;
 
   bool mIsPrintCanvas;
   bool mIsPrintPreview;
   
   bool IsPrintCallbackDone();
+  bool IsPrintCallbackAborted();
 
   bool HandlePrintCallback();
 
   void CallPrintCallback();
+
+  nsIDOMHTMLCanvasElement* GetOriginalCanvas();
 };
 
 #endif /* nsHTMLCanvasElement_h__ */
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -74,17 +74,17 @@ using namespace mozilla::layers;
    {0x8d5fb8a0, 0x7782, 0x11e1, { 0xb0, 0xc4, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x67 }} 
 
 class nsCanvasPrintState : public nsICanvasPrintState
 {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICANVASPRINTSTATE_IID)
 
   nsCanvasPrintState(nsICanvasRenderingContextInternal *aContext)
-      : mIsDone(false), mContext(aContext)
+      : mIsDone(false), mIsAborted(false), mContext(aContext)
   {
   }
 
   NS_IMETHOD GetContext(nsISupports **context)
   {
     printf("=== GetContext2\n");
     NS_ADDREF(*context = mContext);
     return NS_OK;
@@ -92,17 +92,25 @@ public:
 
   NS_IMETHOD Done()
   {
     printf("CPS::Done\n");
     mIsDone = true;
     return NS_OK;
   }
 
+  NS_IMETHOD Abort()
+  {
+    printf("CPS::Abort\n");
+    mIsAborted = true;
+    return NS_OK;
+  }
+
   bool mIsDone;
+  bool mIsAborted;
   
   NS_DECL_ISUPPORTS
 private:
   ~nsCanvasPrintState() 
   {
   }
 
   nsCOMPtr<nsICanvasRenderingContextInternal> mContext;
@@ -119,46 +127,60 @@ DOMCI_DATA(CanvasPrintState, nsCanvasPri
 
 NS_INTERFACE_MAP_BEGIN(nsCanvasPrintState)
   NS_INTERFACE_MAP_ENTRY(nsCanvasPrintState)
   NS_INTERFACE_MAP_ENTRY(nsICanvasPrintState)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CanvasPrintState)
   NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
+/*
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INTERNAL(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mContext)
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
+
+NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mContext);
+NS_IMPL_CYCLE_COLLECTION_UNLINK_END
+*/
+
 // ---------------------------------------------------------------------------
 
 nsGenericHTMLElement*
 NS_NewHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo,
                         FromParser aFromParser)
 {
   return new nsHTMLCanvasElement(aNodeInfo);
 }
 
 nsHTMLCanvasElement::nsHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo)
   : nsGenericHTMLElement(aNodeInfo), mIsReadyToPrint(false),
-    mPrintState(nsnull), mWriteOnly(false),
+    mOriginalCanvas(nsnull), mPrintState(nsnull), mWriteOnly(false),
     mIsPrintCanvas(false), mIsPrintPreview(false) {
 }
 
 nsHTMLCanvasElement::~nsHTMLCanvasElement()
 {
   mPrintCallback = NULL;
   mCurrentContext = NULL;
 }
 
 NS_IMPL_CYCLE_COLLECTION_CLASS(nsHTMLCanvasElement)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsHTMLCanvasElement,
                                                   nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCurrentContext)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mPrintCallback)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mPrintState)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
 NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(nsHTMLCanvasElement,
                                                 nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mCurrentContext)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mPrintCallback)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mPrintState)
 NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 
 NS_IMPL_ADDREF_INHERITED(nsHTMLCanvasElement, nsGenericElement)
 NS_IMPL_RELEASE_INHERITED(nsHTMLCanvasElement, nsGenericElement)
 
 DOMCI_NODE_DATA(HTMLCanvasElement, nsHTMLCanvasElement)
 
 NS_INTERFACE_TABLE_HEAD_CYCLE_COLLECTION_INHERITED(nsHTMLCanvasElement)
@@ -233,55 +255,75 @@ nsHTMLCanvasElement::HandlePrintCallback
 
 void
 nsHTMLCanvasElement::CallPrintCallback()
 {
   printf("=== CE::CallPrintCallback\n");
   // ??? Any ADD_REF magic to be done here ???
   mPrintState = new nsCanvasPrintState(mCurrentContext);
   mPrintCallback->Render(mPrintState);
-
- // nsRefPtr<nsICanvasPrintState> obj = new nsCanvasPrintState(mCurrentContext);
- // mPrintCallback->Render(obj.forget().get());  
 }
 
 bool
 nsHTMLCanvasElement::IsPrintCallbackDone()
 {
   printf("=== CE:IsPrintCallbackDone\n");
   if (mPrintState == nsnull) {
     return true;
   }
 
   return mPrintState->mIsDone;
 }
 
+bool
+nsHTMLCanvasElement::IsPrintCallbackAborted()
+{
+  printf("=== CE:IsPrintCallbackAborted\n");
+  if (mPrintState == nsnull) {
+    return false;
+  }
+
+  return mPrintState->mIsAborted;
+}
+
+nsIDOMHTMLCanvasElement*
+nsHTMLCanvasElement::GetOriginalCanvas()
+{
+  if (mOriginalCanvas == nsnull) {
+    return this;
+  } else {
+    return mOriginalCanvas.get();
+  }
+}
+
 nsresult
 nsHTMLCanvasElement::CopyInnerTo(nsGenericElement* aDest) const
 {
   nsresult rv = nsGenericHTMLElement::CopyInnerTo(aDest);
   NS_ENSURE_SUCCESS(rv, rv);
   if (aDest->OwnerDoc()->IsStaticDocument()) {
     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
     nsHTMLCanvasElement* self = const_cast<nsHTMLCanvasElement*>(this);
 
     // By default, we assume this canvas will be displayed in PrintPreview.
     dest->mIsPrintPreview = true;
     dest->mPrintCallback = self->mPrintCallback;
+    dest->mOriginalCanvas = self;
+
+    nsCOMPtr<nsISupports> cxt;
+    dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
+    nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
 
     // Mark the canvas to be a "PrintCanvas" in case there is a special
     // rendering callback for printing.
     if (dest->mPrintCallback) {
       dest->mIsPrintCanvas = true;
     }
-
-    nsCOMPtr<nsISupports> cxt;
-    dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
-    nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
-    if (context2d) {
+    
+    if (context2d && !dest->mIsPrintCanvas) {
       context2d->DrawImage(self,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
     }
   }
   return rv;
 }
 
 nsChangeHint
@@ -366,29 +408,19 @@ nsHTMLCanvasElement::SetMozPrintCallback
 {
   mPrintCallback = aCallback;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsHTMLCanvasElement::GetMozPrintCallback(nsIPrintCallback** aCallback)
 {
+  NS_IF_ADDREF(*aCallback = mPrintCallback);
   return NS_OK;
 }
-/*
-NS_IMETHODIMP
-nsHTMLCanvasElement::SetMozPrintCallback(JSContext *cx, const jsval& callback)
-{
-  // Check that
-  if (JSVAL_IS_OBJECT(callback) && !JSVAL_IS_NULL(callback)) {
-    mPrintCallback = JSVAL_TO_OBJECT(callback);
-    NS_HOLD_JS_OBJECTS(this, mPrintCallback);
-  }
-}
-*/
 
 nsresult
 nsHTMLCanvasElement::ExtractData(const nsAString& aType,
                                  const nsAString& aOptions,
                                  nsIInputStream** aStream,
                                  bool& aFellBackToPNG)
 {
   // note that if we don't have a current context, the spec says we're
diff --git a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
--- a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
+++ b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
@@ -56,16 +56,17 @@ interface nsIDOMFile;
 interface nsIVariant;
 interface nsIInputStreamCallback;
 
 [scriptable, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a67)]
 interface nsICanvasPrintState : nsISupports {
   readonly attribute nsISupports context;
 
   void done();
+  void abort();
 };
 
 [scriptable, function, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a66)]
 interface nsIPrintCallback : nsISupports {
   void render(in nsICanvasPrintState ctx);
 };
 
 [scriptable, uuid(5929542B-C68E-48AB-84F9-D9642DA39720)]
diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -4084,16 +4084,17 @@ nsLayoutUtils::SurfaceFromElement(dom::E
 
   if (!premultAlpha) {
     forceCopy = true;
     wantImageSurface = true;
   }
 
   // If it's a <canvas>, we may be able to just grab its internal surface
   if (nsHTMLCanvasElement* canvas = nsHTMLCanvasElement::FromContent(aElement)) {
+    printf("=== nsLayoutUtils::SurfaceFromElement - Enter Canvas\n");
     gfxIntSize size = canvas->GetSize();
 
     nsRefPtr<gfxASurface> surf;
 
     if (!forceCopy && canvas->CountContexts() == 1) {
       nsICanvasRenderingContextInternal *srcCanvas = canvas->GetContextAtIndex(0);
       rv = srcCanvas->GetThebesSurface(getter_AddRefs(surf));
 
@@ -4116,16 +4117,17 @@ nsLayoutUtils::SurfaceFromElement(dom::E
       PRUint32 flags = premultAlpha ? nsHTMLCanvasElement::RenderFlagPremultAlpha : 0;
       rv = canvas->RenderContextsExternal(ctx, gfxPattern::FILTER_NEAREST, flags);
       if (NS_FAILED(rv))
         return result;
     }
 
     // Ensure that any future changes to the canvas trigger proper invalidation,
     // in case this is being used by -moz-element()
+    printf("=== nsLayoutUtils::SurfaceFromElement - MarkContextClean\n");
     canvas->MarkContextClean();
 
     result.mSurface = surf;
     result.mSize = size;
     result.mPrincipal = aElement->NodePrincipal();
     result.mIsWriteOnly = canvas->IsWriteOnly();
 
     return result;
diff --git a/layout/generic/nsIPageSequenceFrame.h b/layout/generic/nsIPageSequenceFrame.h
--- a/layout/generic/nsIPageSequenceFrame.h
+++ b/layout/generic/nsIPageSequenceFrame.h
@@ -66,17 +66,17 @@ public:
    *            and the start page is greater than the total number of pages
    *          NS_ERROR_FAILURE if there is an error
    */
   NS_IMETHOD StartPrint(nsPresContext*  aPresContext,
                         nsIPrintSettings* aPrintOptions,
                         PRUnichar* aDocTitle,
                         PRUnichar* aDocURL) = 0;
 
-  NS_IMETHOD PrePrintNextPage(bool *aDone) = 0;
+  NS_IMETHOD PrePrintNextPage(bool *aDone, bool *aAborted) = 0;
   NS_IMETHOD PrintNextPage() = 0;
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum) = 0;
   NS_IMETHOD GetNumPages(PRInt32* aNumPages) = 0;
   NS_IMETHOD IsDoingPrintRange(bool* aDoing) = 0;
   NS_IMETHOD GetPrintRange(PRInt32* aFromPage, PRInt32* aToPage) = 0;
 
   NS_IMETHOD DoPageEnd() = 0;
   NS_IMETHOD SetSelectionHeight(nscoord aYOffset, nscoord aHeight) = 0;
diff --git a/layout/generic/nsSimplePageSequence.cpp b/layout/generic/nsSimplePageSequence.cpp
--- a/layout/generic/nsSimplePageSequence.cpp
+++ b/layout/generic/nsSimplePageSequence.cpp
@@ -518,17 +518,17 @@ nsSimplePageSequenceFrame::StartPrint(ns
 
   if (mTotalPages == -1) {
     mTotalPages = totalPages;
   }
 
   return rv;
 }
 
-void GetPrintCanvasElementsInFrame(nsTArray<nsRefPtr<nsHTMLCanvasElement> >* aArr, nsIFrame* aFrame)
+void GetPrintCanvasElementsInFrame(nsIFrame* aFrame, nsTArray<nsRefPtr<nsHTMLCanvasElement> >* aArr)
 {
 
   for (nsIFrame::ChildListIterator childLists(aFrame);
     !childLists.IsDone(); childLists.Next()) {
 
     nsFrameList children = childLists.CurrentList();
     for (nsFrameList::Enumerator e(children); !e.AtEnd(); e.Next()) {
       nsIFrame* child = e.get();
@@ -545,17 +545,17 @@ void GetPrintCanvasElementsInFrame(nsTAr
         if (canvas && canvas->mIsPrintCanvas) {
           aArr->AppendElement(canvas);
           continue;
         }
       }
       // The current child is not a nsHTMLCanvasFrame OR it is but there is
       // no nsHTMLCanvasElement on it. Check if children of `child` might
       // contain a nsHTMLCanvasElement.
-      GetPrintCanvasElementsInFrame(aArr, child);
+      GetPrintCanvasElementsInFrame(child, aArr);
     }
   }
 }
 
 void
 nsSimplePageSequenceFrame::ComputePrintThisPage()
 {
   // See whether we should print this page
@@ -605,18 +605,19 @@ nsSimplePageSequenceFrame::ComputePrintT
   }
   
   if (nsIPrintSettings::kRangeSelection == mPrintRangeType) {
     mPrintThisPage = true;
   }
 }
 
 NS_IMETHODIMP
-nsSimplePageSequenceFrame::PrePrintNextPage(bool* aDone)
+nsSimplePageSequenceFrame::PrePrintNextPage(bool* aDone, bool* aAborted)
 {
+  *aAborted = false;
   printf("--- SPSF::PrePrintNextPage : ENTER\n");
   if (mCurrentPageFrame == nsnull) {
     *aDone = true;
     return NS_ERROR_FAILURE;
   }
   
   ComputePrintThisPage();
   // Nothing to do if the current page doesn't get printed OR rendering to
@@ -629,17 +630,17 @@ nsSimplePageSequenceFrame::PrePrintNextP
 
   printf("--- SPSF::PrePrintNextPage : CheckIfSetupList\n");
 
 
   // If the canvasList is null, then generate it and start the render
   // process for all the canvas.
   if (!mCurrentCanvasListSetup) {
     mCurrentCanvasListSetup = true;
-    GetPrintCanvasElementsInFrame(&mCurrentCanvasList, mCurrentPageFrame);
+    GetPrintCanvasElementsInFrame(mCurrentPageFrame, &mCurrentCanvasList);
 
     printf("=== GotCanvasList: %d \n", mCurrentCanvasList.Length()); 
 
     nsRefPtr<gfxASurface> renderingSurface;
     if (mCurrentCanvasList.Length() != 0) {
       nsresult rv = NS_OK;
 
       // Begin printing of the document
@@ -687,17 +688,22 @@ nsSimplePageSequenceFrame::PrePrintNextP
       printf(">>> Context: setup!\n");
     }
   }
 
   PRInt32 doneCounter = 0;
   for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
     nsHTMLCanvasElement *canvas = mCurrentCanvasList[i];
 
-    if (canvas->IsPrintCallbackDone()) {
+    if (canvas->IsPrintCallbackAborted()) {
+      *aDone = true;
+      *aAborted = true;
+      printf("!!! nsSimplePageSequenceFrame::PrePrintNextPage(...) - ABORTED!\n");
+      return NS_OK;
+    } else if (canvas->IsPrintCallbackDone()) {
       doneCounter++;
     }
   }
 
   // If all canvas have finished rendering, return true, otherwise false.
   *aDone = doneCounter == mCurrentCanvasList.Length();
   return NS_OK;
 }
diff --git a/layout/generic/nsSimplePageSequence.h b/layout/generic/nsSimplePageSequence.h
--- a/layout/generic/nsSimplePageSequence.h
+++ b/layout/generic/nsSimplePageSequence.h
@@ -105,17 +105,17 @@ public:
   NS_IMETHOD GetSTFPercent(float& aSTFPercent);
 
   // Async Printing
   NS_IMETHOD StartPrint(nsPresContext*  aPresContext,
                         nsIPrintSettings* aPrintSettings,
                         PRUnichar*        aDocTitle,
                         PRUnichar*        aDocURL);
 
-  NS_IMETHOD PrePrintNextPage(bool *aDone);
+  NS_IMETHOD PrePrintNextPage(bool *aDone, bool *aAborted);
   NS_IMETHOD PrintNextPage();
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum);
   NS_IMETHOD GetNumPages(PRInt32* aNumPages);
   NS_IMETHOD IsDoingPrintRange(bool* aDoing);
   NS_IMETHOD GetPrintRange(PRInt32* aFromPage, PRInt32* aToPage);
   NS_IMETHOD DoPageEnd();
 
   // We must allow Print Preview UI to have a background, no matter what the
diff --git a/layout/printing/nsPrintData.cpp b/layout/printing/nsPrintData.cpp
--- a/layout/printing/nsPrintData.cpp
+++ b/layout/printing/nsPrintData.cpp
@@ -88,16 +88,18 @@ nsPrintData::nsPrintData(ePrintDataType 
   if (!mBrandName) {
     mBrandName = ToNewUnicode(NS_LITERAL_STRING("Mozilla Document"));
   }
 
 }
 
 nsPrintData::~nsPrintData()
 {
+  printf("=== nsPrintData::~nsPrintData()\n");
+
   MOZ_COUNT_DTOR(nsPrintData);
   // remove the event listeners
   if (mPPEventListeners) {
     mPPEventListeners->RemoveListeners();
     NS_RELEASE(mPPEventListeners);
   }
 
   // Only Send an OnEndPrinting if we have started printing
diff --git a/layout/printing/nsPrintEngine.cpp b/layout/printing/nsPrintEngine.cpp
--- a/layout/printing/nsPrintEngine.cpp
+++ b/layout/printing/nsPrintEngine.cpp
@@ -2445,23 +2445,41 @@ nsPrintEngine::PrePrintPage()
 
   // Check setting to see if someone request it be cancelled
   bool isCancelled = false;
   mPrt->mPrintSettings->GetIsCancelled(&isCancelled);
   if (isCancelled)
     return true;
 
   // Ask mPageSeqFrame if the page is ready to be printed.
-  // If the page doesn't get printed at all, the function will return true.
+  // If the page doesn't get printed at all, the |done| will be |true|.
+  // |aborted| is set to true iff |printState.aborted()| was called on one of
+  // the printCanvas.
   bool done = false;
-  nsresult rv = mPageSeqFrame->PrePrintNextPage(&done);
+  bool aborted = false;
+  nsresult rv = mPageSeqFrame->PrePrintNextPage(&done, &aborted);
   if (NS_FAILED(rv)) {
-    ShowPrintErrorDialog(rv);
+    printf("nsPrintEngine::PrePrintPage() - ERROR!\n");
+    // ??? ::PrintPage doesn't set |mPrt->mIsAborted = true| if rv != NS_ERROR_ABORT,
+    // but I don't really understand why this should be the right thing to do?
+    // Shouldn't |mPrt->mIsAborted| set to true all the time if something
+    // wents wrong?
+    if (rv != NS_ERROR_ABORT) {
+      ShowPrintErrorDialog(rv);
+      mPrt->mIsAborted = true;
+    }
+    done = true;
+  }
+  // If the printCallback was aborted, then set the isAborted flag, but don't
+  // show any error message. It's the developer's job to show/design the user
+  // some error message.
+  if (aborted) {
+    printf("nsPrintEngine::PrePrintPage() - ABORTED!\n");
     mPrt->mIsAborted = true;
-    return true;
+    done = true;
   }
   return done;
 }
 
 bool
 nsPrintEngine::PrintPage(nsPrintObject*    aPO,
                          bool&           aInRange)
 {
