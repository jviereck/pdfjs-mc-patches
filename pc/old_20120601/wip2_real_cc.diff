# HG changeset patch
# Parent 357884ad06f95ae1f269248977745e148a49ada0

diff --git a/content/html/content/public/nsHTMLCanvasElement.h b/content/html/content/public/nsHTMLCanvasElement.h
--- a/content/html/content/public/nsHTMLCanvasElement.h
+++ b/content/html/content/public/nsHTMLCanvasElement.h
@@ -166,18 +166,16 @@ protected:
                             const nsAString& aType,
                             nsIDOMFile** aResult);
   nsresult GetContextHelper(const nsAString& aContextId,
                             bool aForceThebes,
                             nsICanvasRenderingContextInternal **aContext);
 
   nsString mCurrentContextId;
 
-  bool mIsReadyToPrint;
-
   nsCOMPtr<nsIDOMHTMLCanvasElement> mOriginalCanvas;
   nsCOMPtr<nsIPrintCallback> mPrintCallback;
   nsCOMPtr<nsICanvasRenderingContextInternal> mCurrentContext;
   nsCOMPtr<nsCanvasPrintState> mPrintState;
 public:
   // Record whether this canvas should be write-only or not.
   // We set this when script paints an image from a different origin.
   // We also transitively set it when script paints a canvas which
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -43,16 +43,17 @@ using namespace mozilla::layers;
 #define NS_ICANVASPRINTSTATE_IID \
    {0x8d5fb8a0, 0x7782, 0x11e1, { 0xb0, 0xc4, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x67 }} 
 
 class nsCanvasPrintState : public nsICanvasPrintState
 {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICANVASPRINTSTATE_IID)
 
+
   nsCanvasPrintState(
       nsHTMLCanvasElement *aCanvas,
       nsICanvasRenderingContextInternal *aContext, 
       nsITimerCallback *aCallback)
   : mIsDone(false), mIsAborted(false),
     mCanvas(aCanvas), mContext(aContext), mCallback(aCallback) {
   }
 
@@ -90,62 +91,72 @@ public:
       }
       Reset();
     }
   }
 
   void Reset()
   {
     printf("=== nsCanvasPrintState::Reset()\n");
-    mContext = nsnull;
-    mCallback = nsnull;
   }
 
   bool mIsDone;
   bool mIsAborted;
-  
-  NS_DECL_ISUPPORTS
+
+  // CC
+  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
+  NS_DECL_CYCLE_COLLECTION_CLASS(nsCanvasPrintState)
 private:
   ~nsCanvasPrintState() 
   {
     printf("--- nsCanvasPrintState::Destory\n");
   }
 
+protected:
   nsRefPtr<nsHTMLCanvasElement> mCanvas;
   nsCOMPtr<nsICanvasRenderingContextInternal> mContext;
   nsCOMPtr<nsITimerCallback> mCallback;
-protected:
-  /* additional members */
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsCanvasPrintState, NS_ICANVASPRINTSTATE_IID) 
 
-NS_IMPL_ADDREF(nsCanvasPrintState)
-NS_IMPL_RELEASE(nsCanvasPrintState)
+NS_IMPL_CYCLE_COLLECTING_ADDREF(nsCanvasPrintState)
+NS_IMPL_CYCLE_COLLECTING_RELEASE(nsCanvasPrintState)
 
 DOMCI_DATA(CanvasPrintState, nsCanvasPrintState)
 
-NS_INTERFACE_MAP_BEGIN(nsCanvasPrintState)
-  NS_INTERFACE_MAP_ENTRY(nsCanvasPrintState)
+NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(nsCanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
   NS_INTERFACE_MAP_ENTRY(nsICanvasPrintState)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CanvasPrintState)
-  NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
+NS_IMPL_CYCLE_COLLECTION_CLASS(nsCanvasPrintState)
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR_AMBIGUOUS(mCanvas, nsIDOMHTMLCanvasElement)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mContext)
+  NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCallback)
+NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
+
+NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(nsCanvasPrintState)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mCanvas)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mContext)
+  NS_IMPL_CYCLE_COLLECTION_UNLINK_NSCOMPTR(mCallback)
+NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 // ---------------------------------------------------------------------------
 
 nsGenericHTMLElement*
 NS_NewHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo,
                         FromParser aFromParser)
 {
   return new nsHTMLCanvasElement(aNodeInfo);
 }
 
 nsHTMLCanvasElement::nsHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo)
-  : nsGenericHTMLElement(aNodeInfo), mIsReadyToPrint(false),
+  : nsGenericHTMLElement(aNodeInfo), 
     mOriginalCanvas(nsnull), mPrintState(nsnull), mWriteOnly(false),
     mIsPrintCanvas(false), mIsPrintPreview(false) {
     printf("=== nsHTMLCanvasElement - Created!\n");
 }
 
 nsHTMLCanvasElement::~nsHTMLCanvasElement()
 {
   ResetPrintCallback();
@@ -224,21 +235,20 @@ nsHTMLCanvasElement::SetAttr(PRInt32 aNa
 }
 
 bool
 nsHTMLCanvasElement::HandlePrintCallback()
 {
   printf("=== HandlePrintCallback\n");
   // If the canvas is a printCanvas and the printing target is real paper,
   // then the canvas is setup in nsSimplePageSequence::PrePagePrintNext().
-  if (mIsReadyToPrint || !mIsPrintCanvas || !mIsPrintPreview) {
+  if (mPrintState || !mIsPrintCanvas || !mIsPrintPreview) {
     return true;
   }
 
-  mIsReadyToPrint = true;
   CallPrintCallback(nsnull);
   return true;
 }
 
 void
 nsHTMLCanvasElement::CallPrintCallback(nsITimerCallback *aCallback)
 {
   printf("=== CE::CallPrintCallback\n");
diff --git a/layout/generic/nsSimplePageSequence.cpp b/layout/generic/nsSimplePageSequence.cpp
--- a/layout/generic/nsSimplePageSequence.cpp
+++ b/layout/generic/nsSimplePageSequence.cpp
@@ -519,17 +519,17 @@ void GetPrintCanvasElementsInFrame(nsIFr
       // no nsHTMLCanvasElement on it. Check if children of `child` might
       // contain a nsHTMLCanvasElement.
       GetPrintCanvasElementsInFrame(child, aArr);
     }
   }
 }
 
 void
-nsSimplePageSequenceFrame::ComputePrintThisPage()
+nsSimplePageSequenceFrame::DetermineWhetherToPrintPage()
 {
   // See whether we should print this page
   mPrintThisPage = true;
 
   bool printEvenPages, printOddPages;
   mPageData->mPrintSettings->GetPrintOptions(nsIPrintSettings::kPrintEvenPages, &printEvenPages);
   mPageData->mPrintSettings->GetPrintOptions(nsIPrintSettings::kPrintOddPages, &printOddPages);
 
@@ -582,17 +582,17 @@ nsSimplePageSequenceFrame::PrePrintNextP
 {
   *aAborted = false;
   printf("--- SPSF::PrePrintNextPage : ENTER\n");
   if (mCurrentPageFrame == nsnull) {
     *aDone = true;
     return NS_ERROR_FAILURE;
   }
   
-  ComputePrintThisPage();
+  DetermineWhetherToPrintPage();
   // Nothing to do if the current page doesn't get printed OR rendering to
   // preview. For preview, the `CallPrintCallback` is called from within the
   // nsHTMLCanvasElement::HandlePrintCallback.
   if (!mPrintThisPage || !PresContext()->IsRootPaginatedDocument()) {
     *aDone = true;
     return NS_OK;
   }
 
@@ -728,17 +728,17 @@ nsSimplePageSequenceFrame::PrintNextPage
 // the page numbers would have been 2 and then 3)
 
   if (mCurrentPageFrame == nsnull) {
     return NS_ERROR_FAILURE;
   }
 
   nsresult rv = NS_OK;
 
-  ComputePrintThisPage();
+  DetermineWhetherToPrintPage();
 
   if (mPrintThisPage) {
     // Begin printing of the document
     nsDeviceContext *dc = PresContext()->DeviceContext();
 
     // XXX This is temporary fix for printing more than one page of a selection
     // This does a poor man's "dump" pagination (see Bug 89353)
     // It has laid out as one long page and now we are just moving or view up/down 
diff --git a/layout/generic/nsSimplePageSequence.h b/layout/generic/nsSimplePageSequence.h
--- a/layout/generic/nsSimplePageSequence.h
+++ b/layout/generic/nsSimplePageSequence.h
@@ -120,16 +120,18 @@ protected:
   void SetPageNumberFormat(PRUnichar * aFormatStr, bool aForPageNumOnly);
 
   // Sets the frame desired size to the size of the viewport, or the given
   // nscoords, whichever is larger. Print scaling is applied in this function.
   void SetDesiredSize(nsHTMLReflowMetrics& aDesiredSize,
                       const nsHTMLReflowState& aReflowState,
                       nscoord aWidth, nscoord aHeight);
 
+  void         DetermineWhetherToPrintPage();
+
   nsMargin mMargin;
 
   // I18N date formatter service which we'll want to cache locally.
   nsCOMPtr<nsIDateTimeFormat> mDateFormatter;
 
   nsSize       mSize;
   nsSharedPageData* mPageData; // data shared by all the nsPageFrames
 
@@ -138,26 +140,25 @@ protected:
   PRInt32      mPageNum;
   PRInt32      mTotalPages;
   PRInt32      mPrintRangeType;
   PRInt32      mFromPageNum;
   PRInt32      mToPageNum;
   nsTArray<PRInt32> mPageRanges;
   nsTArray<nsRefPtr<nsHTMLCanvasElement> > mCurrentCanvasList;
 
-  bool         mCurrentCanvasListSetup;
-  void         ComputePrintThisPage();
-
   // Selection Printing Info
   nscoord      mSelectionHeight;
   nscoord      mYSelOffset;
 
   // Asynch Printing
   bool mPrintThisPage;
   bool mDoingPageRange;
 
   bool mIsPrintingSelection;
   
   bool mCalledBeginPage;
+
+  bool mCurrentCanvasListSetup;
 };
 
 #endif /* nsSimplePageSequence_h___ */
 
diff --git a/toolkit/components/printing/content/printPreviewBindings.xml b/toolkit/components/printing/content/printPreviewBindings.xml
--- a/toolkit/components/printing/content/printPreviewBindings.xml
+++ b/toolkit/components/printing/content/printPreviewBindings.xml
@@ -128,40 +128,16 @@
       <constructor>
       <![CDATA[
         var print = PrintUtils.getPrintPreview();
         this.mTotalPages.value = print.printPreviewNumPages;
         this.mPageTextBox.max = print.printPreviewNumPages;
 
         this.updateToolbar();
 
-        /*
-        function closeOnPrintCanvasAbort() {
-          Components.utils.reportError("closeOnPrintCanvasAbort");
-          PrintUtils.exitPrintPreview();
-
-          document.removeEventListener(
-            "printCanvasAbort", closeOnPrintCanvasAbort);
-        }
-        // If a printCanvas aborts, then close print preview.
-        document.addEventListener("printCanvasAbort",
-          closeOnPrintCanvasAbort, false);
-
-        function onCloseWindow() {
-          Components.utils.reportError("beforeunload");
-          document.removeEventListener(
-            "printCanvasAbort", closeOnPrintCanvasAbort);
-          window.removeEventListener(
-            "close", onCloseWindow();
-        }
-
-        // Remove the printCanasAbort event again when closing the window.
-        window.addEventListener("close", , false);
-        */
-
         // Hide the ``Print...'' button when the underlying gfx code does not
         // support multiple devicecontext to be used concurrently
         // (e.g. printing and printpreview at the same time; required as 
         // legacy support for unices.'s PostScript module
         // XXX the scaling widgets, and the orientation widgets on unices.
         var canPrint = true;
         try
         {
