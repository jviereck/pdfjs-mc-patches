try: -b o -e -p all -u all -t none

diff --git a/content/canvas/public/nsICanvasRenderingContextInternal.h b/content/canvas/public/nsICanvasRenderingContextInternal.h
--- a/content/canvas/public/nsICanvasRenderingContextInternal.h
+++ b/content/canvas/public/nsICanvasRenderingContextInternal.h
@@ -81,16 +81,18 @@ public:
   // This method should NOT hold a ref to aParentCanvas; it will be called
   // with nsnull when the element is going away.
   NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas) = 0;
 
   // Sets the dimensions of the canvas, in pixels.  Called
   // whenever the size of the element changes.
   NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height) = 0;
 
+  NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height) = 0;
+
   NS_IMETHOD InitializeWithSurface(nsIDocShell *docShell, gfxASurface *surface, PRInt32 width, PRInt32 height) = 0;
 
   // Render the canvas at the origin of the given gfxContext
   NS_IMETHOD Render(gfxContext *ctx,
                     gfxPattern::GraphicsFilter aFilter,
                     PRUint32 aFlags = RenderFlagPremultAlpha) = 0;
 
   // Gives you a stream containing the image represented by this context.
diff --git a/content/canvas/src/WebGLContext.cpp b/content/canvas/src/WebGLContext.cpp
--- a/content/canvas/src/WebGLContext.cpp
+++ b/content/canvas/src/WebGLContext.cpp
@@ -346,16 +346,24 @@ WebGLContext::SetContextOptions(nsIPrope
         // aren't the same as what they were originally.
         return NS_ERROR_FAILURE;
     }
 
     mOptions = newOpts;
     return NS_OK;
 }
 
+
+NS_IMETHODIMP
+WebGLContext::AdjustToSize(PRInt32 width, PRInt32 height)
+{
+  // TODO: Implement me!
+  return NS_OK;
+}
+
 NS_IMETHODIMP
 WebGLContext::SetDimensions(PRInt32 width, PRInt32 height)
 {
     /*** early success return cases ***/
   
     if (mCanvasElement) {
         HTMLCanvasElement()->InvalidateCanvas();
     }
diff --git a/content/canvas/src/WebGLContext.h b/content/canvas/src/WebGLContext.h
--- a/content/canvas/src/WebGLContext.h
+++ b/content/canvas/src/WebGLContext.h
@@ -544,16 +544,17 @@ public:
 
     // nsICanvasRenderingContextInternal
     NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas);
     nsHTMLCanvasElement* HTMLCanvasElement() {
         return static_cast<nsHTMLCanvasElement*>(mCanvasElement.get());
     }
 
     NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height);
+    NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height);
     NS_IMETHOD InitializeWithSurface(nsIDocShell *docShell, gfxASurface *surface, PRInt32 width, PRInt32 height)
         { return NS_ERROR_NOT_IMPLEMENTED; }
     NS_IMETHOD Reset()
         { /* (InitializeWithSurface) */ return NS_ERROR_NOT_IMPLEMENTED; }
     NS_IMETHOD Render(gfxContext *ctx,
                       gfxPattern::GraphicsFilter f,
                       PRUint32 aFlags = RenderFlagPremultAlpha);
     NS_IMETHOD GetInputStream(const char* aMimeType,
diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -342,16 +342,18 @@ class nsCanvasRenderingContext2D :
 public:
     nsCanvasRenderingContext2D();
     virtual ~nsCanvasRenderingContext2D();
 
     nsresult Redraw();
 
     // nsICanvasRenderingContextInternal
     NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas);
+    NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height);
+    void ExternalScaleMatrix(gfxMatrix &matrix);
     NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height);
     void Initialize(nsIDocShell *shell, PRInt32 width, PRInt32 height);
     NS_IMETHOD InitializeWithSurface(nsIDocShell *shell, gfxASurface *surface, PRInt32 width, PRInt32 height);
     bool EnsureSurface();
     NS_IMETHOD Render(gfxContext *ctx,
                       gfxPattern::GraphicsFilter aFilter,
                       PRUint32 aFlags = RenderFlagPremultAlpha);
     NS_IMETHOD GetInputStream(const char* aMimeType,
@@ -460,16 +462,19 @@ protected:
     /**
      * Returns the image format this canvas should be allocated using. Takes
      * into account mOpaque, platform requirements, etc.
      */
     gfxASurface::gfxImageFormat GetImageFormat() const;
 
     // Member vars
     PRInt32 mWidth, mHeight;
+    PRInt32 mExternalWidth, mExternalHeight;
+    bool mExternalScale = false;
+    float mExternalScaleX, mExternalScaleY;
     bool mValid;
     bool mZero;
     bool mOpaque;
     bool mResetLayer;
     bool mIPC;
 
     // the canvas element we're a context of
     nsCOMPtr<nsIDOMHTMLCanvasElement> mCanvasElement;
@@ -1089,26 +1094,55 @@ nsCanvasRenderingContext2D::RedrawUser(c
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetDimensions(PRInt32 width, PRInt32 height)
 {
     Initialize(NULL, width, height);
     return NS_OK;
 }
 
+/**
+ * Changes the size of the context to some new width/height, but for the user,
+ * the context keeps the current "dimensions".
+ */
+NS_IMETHODIMP
+nsCanvasRenderingContext2D::AdjustToSize(PRInt32 width, PRInt32 height)
+{
+    if (!EnsureSurface())
+        return NS_ERROR_FAILURE;
+
+    if (width == 0 || height == 0)
+        return NS_ERROR_FAILURE;
+
+    PRInt32 oldWidth = mWidth, oldHeight = mHeight;
+
+    SetDimensions(width, height);
+    mExternalWidth = width;
+    mExternalHeight = height;
+    mExternalScaleX = ((float)mWidth)/((float)oldWidth);
+    mExternalScaleY = ((float)mHeight)/((float)oldHeight);
+    mExternalScale = true;
+    Scale(mExternalScaleX, mExternalScaleY);
+
+    return NS_OK;
+}
+
 void
 nsCanvasRenderingContext2D::Initialize(nsIDocShell *docShell, PRInt32 width, PRInt32 height) 
 {
     Reset();
 
     NS_ASSERTION(!docShell ^ !mCanvasElement, "Cannot set both docshell and canvas element");
     mDocShell = docShell;
 
-    mWidth = width;
-    mHeight = height;
+    mWidth = mExternalWidth = width;
+    mExternalScaleX = 1.0;
+    mHeight = mExternalHeight = height;
+    mExternalScaleY = 1.0;
+    mExternalScale = false;
 
     mResetLayer = true;
     mValid = true;
     mSurfaceCreated = false;
 
     // set up the initial canvas defaults
     mStyleStack.Clear();
     mSaveCount = 0;
@@ -1179,16 +1213,21 @@ nsCanvasRenderingContext2D::EnsureSurfac
 
     // Check that the dimensions are sane
     if (gfxASurface::CheckSurfaceSize(gfxIntSize(mWidth, mHeight), 0xffff)) {
         // Zero sized surfaces have problems, so just use a 1 by 1.
         if (mHeight == 0 || mWidth == 0) {
             mZero = true;
             mHeight = 1;
             mWidth = 1;
+            mExternalScaleX = 1.0;
+            mExternalScaleY = 1.0;
+            mExternalHeight = 1;
+            mExternalWidth = 1;
+            mExternalScale = false;
         } else {
             mZero = false;
         }
 
         gfxASurface::gfxImageFormat format = GetImageFormat();
 
         if (!PR_GetEnv("MOZ_CANVAS_IMAGE_SURFACE")) {
             nsCOMPtr<nsIContent> content = do_QueryObject(mCanvasElement);
@@ -1488,26 +1527,43 @@ nsCanvasRenderingContext2D::Transform(fl
         return NS_OK;
 
     gfxMatrix matrix(m11, m12, m21, m22, dx, dy);
     mThebes->Multiply(matrix);
 
     return NS_OK;
 }
 
+void
+nsCanvasRenderingContext2D::ExternalScaleMatrix(gfxMatrix &matrix)
+{
+    float sx = mExternalScaleX;
+    float sy = mExternalScaleY;
+    matrix.xx *= sx;
+    matrix.xy *= sx;
+    matrix.x0 *= sx;
+    matrix.yx *= sy;
+    matrix.yy *= sy;
+    matrix.y0 *= sy;
+}
+
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetTransform(float m11, float m12, float m21, float m22, float dx, float dy)
 {
     if (!EnsureSurface())
         return NS_ERROR_FAILURE;
 
     if (!FloatValidate(m11,m12,m21,m22,dx,dy))
         return NS_OK;
 
     gfxMatrix matrix(m11, m12, m21, m22, dx, dy);
+
+    if (mExternalScale)
+        ExternalScaleMatrix(matrix);
+
     mThebes->SetMatrix(matrix);
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetMozCurrentTransform(JSContext* cx,
                                                    const jsval& matrix)
@@ -1517,16 +1573,19 @@ nsCanvasRenderingContext2D::SetMozCurren
     
     if (!EnsureSurface())
         return NS_ERROR_FAILURE;
 
     if (!JSValToMatrix(cx, matrix, &newCTM, &rv)) {
         return rv;
     }
 
+    if (mExternalScale)
+        ExternalScaleMatrix(newCTM);
+
     mThebes->SetMatrix(newCTM);
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::GetMozCurrentTransform(JSContext* cx,
                                                    jsval* matrix)
@@ -3954,33 +4013,34 @@ nsCanvasRenderingContext2D::GetImageData
         return NS_ERROR_FAILURE;
 
     nsRefPtr<gfxContext> tmpctx = new gfxContext(tmpsurf);
 
     if (tmpctx->HasError())
         return NS_ERROR_FAILURE;
 
     if (!mZero) {
-        gfxRect srcRect(0, 0, mWidth, mHeight);
+        gfxRect srcRect(0, 0, mExternalWidth, mExternalHeight);
         gfxRect destRect(aX, aY, aWidth, aHeight);
 
         bool finishedPainting = false;
         // In the common case, we want to avoid the Rectangle call.
         if (!srcRect.Contains(destRect)) {
             // If the requested area is entirely outside the canvas, we're done.
             gfxRect tmp = srcRect.Intersect(destRect);
             finishedPainting = tmp.IsEmpty();
 
             // Set clipping region if necessary.
             if (!finishedPainting) {
                 tmpctx->Rectangle(tmp);
             }
         }
 
         if (!finishedPainting) {
+            tmpctx->Scale(1.0/mExternalScaleX, 1.0/mExternalScaleY);
             tmpctx->SetOperator(gfxContext::OPERATOR_SOURCE);
             tmpctx->SetSource(mSurface, gfxPoint(-aX, -aY));
             tmpctx->Paint();
         }
     }
 
     // make sure sUnpremultiplyTable has been created
     EnsureUnpremultiplyTable();
@@ -4089,17 +4149,17 @@ nsCanvasRenderingContext2D::PutImageData
 
         if (dirtyRect.Width() <= 0 || dirtyRect.Height() <= 0)
             return NS_OK;
     } else {
         dirtyRect = imageDataRect;
     }
 
     dirtyRect.MoveBy(gfxPoint(x, y));
-    dirtyRect = gfxRect(0, 0, mWidth, mHeight).Intersect(dirtyRect);
+    dirtyRect = gfxRect(0, 0, mExternalWidth, mExternalHeight).Intersect(dirtyRect);
 
     if (dirtyRect.Width() <= 0 || dirtyRect.Height() <= 0)
         return NS_OK;
 
     PRUint32 len = w * h * 4;
     if (aDataLen != len)
         return NS_ERROR_DOM_SYNTAX_ERR;
 
@@ -4138,16 +4198,17 @@ nsCanvasRenderingContext2D::PutImageData
 
     PathAutoSaveRestore pathSR(this);
     gfxContextAutoSaveRestore autoSR(mThebes);
 
     // ignore clipping region, as per spec
     mThebes->ResetClip();
 
     mThebes->IdentityMatrix();
+    mThebes->Scale(mExternalScaleX, mExternalScaleY);
     mThebes->NewPath();
     mThebes->Rectangle(dirtyRect);
     mThebes->SetSource(imgsurf, gfxPoint(x, y));
     mThebes->SetOperator(gfxContext::OPERATOR_SOURCE);
     mThebes->Fill();
 
     return Redraw(dirtyRect);
 }
diff --git a/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp b/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
@@ -397,16 +397,17 @@ class nsCanvasRenderingContext2DAzure :
 public:
   nsCanvasRenderingContext2DAzure();
   virtual ~nsCanvasRenderingContext2DAzure();
 
   nsresult Redraw();
 
   // nsICanvasRenderingContextInternal
   NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas);
+  NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height);
   NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height);
   NS_IMETHOD InitializeWithSurface(nsIDocShell *shell, gfxASurface *surface, PRInt32 width, PRInt32 height)
   { return NS_ERROR_NOT_IMPLEMENTED; }
 
   NS_IMETHOD Render(gfxContext *ctx,
                     gfxPattern::GraphicsFilter aFilter,
                     PRUint32 aFlags = RenderFlagPremultAlpha);
   NS_IMETHOD GetInputStream(const char* aMimeType,
@@ -1286,16 +1287,24 @@ nsCanvasRenderingContext2DAzure::SetDime
     if (context) {
       JS_updateMallocCounter(context, width * height * 4);
     }
   }
 
   return InitializeWithTarget(target, width, height);
 }
 
+NS_IMETHODIMP
+nsCanvasRenderingContext2DAzure::AdjustToSize(PRInt32 width, PRInt32 height)
+{
+  // TODO: Implement me!
+  return NS_OK;
+}
+
+
 nsresult
 nsCanvasRenderingContext2DAzure::InitializeWithTarget(DrawTarget *target, PRInt32 width, PRInt32 height)
 {
   Reset();
 
   NS_ASSERTION(mCanvasElement, "Must have a canvas element!");
   mDocShell = nsnull;
 
diff --git a/content/html/content/public/nsHTMLCanvasElement.h b/content/html/content/public/nsHTMLCanvasElement.h
--- a/content/html/content/public/nsHTMLCanvasElement.h
+++ b/content/html/content/public/nsHTMLCanvasElement.h
@@ -200,19 +200,29 @@ protected:
   nsresult MozGetAsFileImpl(const nsAString& aName,
                             const nsAString& aType,
                             nsIDOMFile** aResult);
   nsresult GetContextHelper(const nsAString& aContextId,
                             bool aForceThebes,
                             nsICanvasRenderingContextInternal **aContext);
 
   nsString mCurrentContextId;
+
+  bool mIsReadyToPrint = false;
+
+  nsCOMPtr<nsIPrintCallback> mPrintCallback;
   nsCOMPtr<nsICanvasRenderingContextInternal> mCurrentContext;
   
 public:
   // Record whether this canvas should be write-only or not.
   // We set this when script paints an image from a different origin.
   // We also transitively set it when script paints a canvas which
   // is itself write-only.
   bool                     mWriteOnly;
+
+  bool mIsPrintCanvas = false;
+  bool mIsPrintPreview = false;
+
+  bool HandlePrintCallback(nsIntSize &size);
+
 };
 
 #endif /* nsHTMLCanvasElement_h__ */
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -77,16 +77,18 @@ NS_NewHTMLCanvasElement(already_AddRefed
 
 nsHTMLCanvasElement::nsHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo)
   : nsGenericHTMLElement(aNodeInfo), mWriteOnly(false)
 {
 }
 
 nsHTMLCanvasElement::~nsHTMLCanvasElement()
 {
+  mPrintCallback = NULL;
+  mCurrentContext = NULL;
 }
 
 NS_IMPL_CYCLE_COLLECTION_CLASS(nsHTMLCanvasElement)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsHTMLCanvasElement,
                                                   nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCurrentContext)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
@@ -147,28 +149,68 @@ nsHTMLCanvasElement::SetAttr(PRInt32 aNa
   {
     rv = UpdateContext();
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
   return rv;
 }
 
+bool
+nsHTMLCanvasElement::HandlePrintCallback(nsIntSize &size)
+{
+  if (!mIsPrintCanvas)
+    return true;
+
+  nsresult rv;
+
+  // For print preview, resize the canvas context, such that
+  if (mIsPrintPreview) {
+    GetClientWidth(&size.width);
+    GetClientHeight(&size.height);
+
+    if (!mIsReadyToPrint) {
+      rv = mCurrentContext->AdjustToSize(size.width, size.height);
+
+      if (!NS_SUCCEEDED(rv))
+        return false;
+    }
+  }
+
+  if (!mIsReadyToPrint) {
+    mIsReadyToPrint = true;
+    mPrintCallback->Render(mCurrentContext);
+  }
+  return true;
+}
+
 nsresult
 nsHTMLCanvasElement::CopyInnerTo(nsGenericElement* aDest) const
 {
   nsresult rv = nsGenericHTMLElement::CopyInnerTo(aDest);
   NS_ENSURE_SUCCESS(rv, rv);
   if (aDest->OwnerDoc()->IsStaticDocument()) {
     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
+    nsHTMLCanvasElement* self = const_cast<nsHTMLCanvasElement*>(this);
+
+    // By default, we assume this canvas will be displayed in PrintPreview.
+    dest->mIsPrintPreview = true;
+    dest->mPrintCallback = self->mPrintCallback;
+
+    // Mark the canvas to be a "PrintCanvas" in case there is a special
+    // rendering callback for printing.
+    if (dest->mPrintCallback) {
+      dest->mIsPrintCanvas = true;
+    }
+
     nsCOMPtr<nsISupports> cxt;
     dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
     nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
     if (context2d) {
-      context2d->DrawImage(const_cast<nsHTMLCanvasElement*>(this),
+      context2d->DrawImage(self,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
     }
   }
   return rv;
 }
 
 nsChangeHint
 nsHTMLCanvasElement::GetAttributeChangeHint(const nsIAtom* aAttribute,
@@ -242,16 +284,40 @@ nsHTMLCanvasElement::MozFetchAsStream(ns
 
   nsCOMPtr<nsIInputStreamCallback> asyncCallback;
   rv = NS_NewInputStreamReadyEvent(getter_AddRefs(asyncCallback), aCallback, mainThread);
   NS_ENSURE_SUCCESS(rv, rv);
 
   return asyncCallback->OnInputStreamReady(asyncData);
 }
 
+NS_IMETHODIMP
+nsHTMLCanvasElement::SetMozPrintCallback(nsIPrintCallback *aCallback)
+{
+  mPrintCallback = aCallback;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsHTMLCanvasElement::GetMozPrintCallback(nsIPrintCallback** aCallback)
+{
+  return NS_OK;
+}
+/*
+NS_IMETHODIMP
+nsHTMLCanvasElement::SetMozPrintCallback(JSContext *cx, const jsval& callback)
+{
+  // Check that
+  if (JSVAL_IS_OBJECT(callback) && !JSVAL_IS_NULL(callback)) {
+    mPrintCallback = JSVAL_TO_OBJECT(callback);
+    NS_HOLD_JS_OBJECTS(this, mPrintCallback);
+  }
+}
+*/
+
 nsresult
 nsHTMLCanvasElement::ExtractData(const nsAString& aType,
                                  const nsAString& aOptions,
                                  nsIInputStream** aStream,
                                  bool& aFellBackToPNG)
 {
   // note that if we don't have a current context, the spec says we're
   // supposed to just return transparent black pixels of the canvas
diff --git a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
--- a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
+++ b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
@@ -51,16 +51,21 @@
  *
  * @status UNDER_DEVELOPMENT
  */
 
 interface nsIDOMFile;
 interface nsIVariant;
 interface nsIInputStreamCallback;
 
+[scriptable, function, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a66)]
+interface nsIPrintCallback : nsISupports {
+  void render(in nsISupports ctx);
+};
+
 [scriptable, uuid(5929542B-C68E-48AB-84F9-D9642DA39720)]
 interface nsIDOMHTMLCanvasElement : nsIDOMHTMLElement
 {
   attribute unsigned long width;
   attribute unsigned long height;
   attribute boolean mozOpaque;
 
   nsISupports getContext(in DOMString contextId,
@@ -83,10 +88,12 @@ interface nsIDOMHTMLCanvasElement : nsID
   // A Mozilla-only extension to get a canvas context backed by double-buffered
   // shared memory. Only privileged callers can call this.
   nsISupports MozGetIPCContext(in DOMString contextId);
 
   // A Mozilla-only extension that returns the canvas' image data as a data
   // stream in the desired image format.
   void mozFetchAsStream(in nsIInputStreamCallback callback,
                                         [optional] in DOMString type);
+
+  attribute nsIPrintCallback mozPrintCallback;
 };
 
diff --git a/gfx/thebes/gfxASurface.cpp b/gfx/thebes/gfxASurface.cpp
--- a/gfx/thebes/gfxASurface.cpp
+++ b/gfx/thebes/gfxASurface.cpp
@@ -389,16 +389,28 @@ gfxASurface::CheckSurfaceSize(const gfxI
     if (!tmp.valid()) {
         NS_WARNING("Allocation too large (would overflow)!");
         return false;
     }
 
     return true;
 }
 
+bool
+gfxASurface::GetFallbackResolution(double *aXPixPerInch, double *aYPixPerInch)
+{
+  if (mSurfaceValid) {
+    cairo_surface_get_fallback_resolution(mSurface, aXPixPerInch, aYPixPerInch);
+    return true;
+  } else {
+    return false;
+  }
+}
+
+
 /* static */
 PRInt32
 gfxASurface::FormatStrideForWidth(gfxImageFormat format, PRInt32 width)
 {
     return cairo_format_stride_for_width((cairo_format_t)format, (int)width);
 }
 
 nsresult
diff --git a/gfx/thebes/gfxASurface.h b/gfx/thebes/gfxASurface.h
--- a/gfx/thebes/gfxASurface.h
+++ b/gfx/thebes/gfxASurface.h
@@ -202,16 +202,19 @@ public:
     virtual PRInt32 GetDefaultContextFlags() const { return 0; }
 
     static gfxContentType ContentFromFormat(gfxImageFormat format);
     static gfxImageFormat FormatFromContent(gfxContentType format);
 
     void SetSubpixelAntialiasingEnabled(bool aEnabled);
     bool GetSubpixelAntialiasingEnabled();
 
+
+    bool GetFallbackResolution(double *aXPixPerInch, double *aYPixPerInch);
+
     /**
      * Record number of bytes for given surface type.  Use positive bytes
      * for allocations and negative bytes for deallocations.
      */
     static void RecordMemoryUsedForSurfaceType(gfxASurface::gfxSurfaceType aType,
                                                PRInt32 aBytes);
 
     /**
diff --git a/gfx/thebes/gfxContext.h b/gfx/thebes/gfxContext.h
--- a/gfx/thebes/gfxContext.h
+++ b/gfx/thebes/gfxContext.h
@@ -384,16 +384,18 @@ public:
      * Attempts to pixel snap the rectangle, add it to the current
      * path, and to set pattern as the current painting source.  This
      * should be used for drawing filled pixel-snapped rectangles (like
      * images), because the CTM at the time of the SetPattern call needs
      * to have a snapped translation, or you get smeared images.
      */
     void PixelSnappedRectangleAndSetPattern(const gfxRect& rect, gfxPattern *pattern);
 
+    bool GetFallbackResolution(double *aXPixPerInch, double *aYPixPerInch);
+
     /**
      ** Painting sources
      **/
 
     /**
      * Set a solid color to use for drawing.  This color is in the device color space
      * and is not transformed.
      */
diff --git a/layout/generic/nsHTMLCanvasFrame.cpp b/layout/generic/nsHTMLCanvasFrame.cpp
--- a/layout/generic/nsHTMLCanvasFrame.cpp
+++ b/layout/generic/nsHTMLCanvasFrame.cpp
@@ -288,16 +288,19 @@ already_AddRefed<Layer>
 nsHTMLCanvasFrame::BuildLayer(nsDisplayListBuilder* aBuilder,
                               LayerManager* aManager,
                               nsDisplayItem* aItem)
 {
   nsRect area = GetContentRect() - GetPosition() + aItem->ToReferenceFrame();
   nsHTMLCanvasElement* element = static_cast<nsHTMLCanvasElement*>(GetContent());
   nsIntSize canvasSize = GetCanvasSize();
 
+  if (!element->HandlePrintCallback(canvasSize))
+    return nsnull;
+
   if (canvasSize.width <= 0 || canvasSize.height <= 0 || area.IsEmpty())
     return nsnull;
 
   CanvasLayer* oldLayer = static_cast<CanvasLayer*>
     (aBuilder->LayerBuilder()->GetLeafLayerFor(aBuilder, aManager, aItem));
   nsRefPtr<CanvasLayer> layer = element->GetCanvasLayer(aBuilder, oldLayer, aManager);
   if (!layer)
     return nsnull;
diff --git a/layout/generic/nsSimplePageSequence.cpp b/layout/generic/nsSimplePageSequence.cpp
--- a/layout/generic/nsSimplePageSequence.cpp
+++ b/layout/generic/nsSimplePageSequence.cpp
@@ -45,16 +45,18 @@
 #include "nsIPrintSettings.h"
 #include "nsPageFrame.h"
 #include "nsStyleConsts.h"
 #include "nsRegion.h"
 #include "nsCSSFrameConstructor.h"
 #include "nsContentUtils.h"
 #include "nsDisplayList.h"
 #include "mozilla/Preferences.h"
+#include "nsHTMLCanvasFrame.h"
+#include "nsHTMLCanvasElement.h"
 
 // DateTime Includes
 #include "nsDateTimeFormatCID.h"
 
 #define OFFSET_NOT_SET -1
 
 // Print Options
 #include "nsIPrintOptions.h"
@@ -514,16 +516,48 @@ nsSimplePageSequenceFrame::StartPrint(ns
 
   if (mTotalPages == -1) {
     mTotalPages = totalPages;
   }
 
   return rv;
 }
 
+void GetCanvasElementsInFrame(nsTArray<nsRefPtr<nsHTMLCanvasElement> >* aArr, nsIFrame* aFrame)
+{
+
+  for (nsIFrame::ChildListIterator childLists(aFrame);
+    !childLists.IsDone(); childLists.Next()) {
+
+    nsFrameList children = childLists.CurrentList();
+    for (nsFrameList::Enumerator e(children); !e.AtEnd(); e.Next()) {
+      nsIFrame* child = e.get();
+
+      // Check if child is a nsHTMLCanvasFrame.
+      nsHTMLCanvasFrame *canvasFrame = do_QueryFrame(child);
+
+      // If there is a canvasFrame, try to get actual canvas element.
+      if (canvasFrame) {
+        nsHTMLCanvasElement *canvas =
+          nsHTMLCanvasElement::FromContent(canvasFrame->GetContent());
+          // CanvasElementFromContent(canvasFrame->GetContent());
+
+        if (canvas && canvas->mIsPrintCanvas) {
+          aArr->AppendElement(canvas);
+          continue;
+        }
+      }
+      // The current child is not a nsHTMLCanvasFrame OR it is but there is
+      // no nsHTMLCanvasElement on it. Check if children of `child` might
+      // contain a nsHTMLCanvasElement.
+      GetCanvasElementsInFrame(aArr, child);
+    }
+  }
+}
+
 NS_IMETHODIMP
 nsSimplePageSequenceFrame::PrintNextPage()
 {
   // Print each specified page
   // pageNum keeps track of the current page and what pages are printing
   //
   // printedPageNum keeps track of the current page number to be printed
   // Note: When print al the pages or a page range the printed page shows the
@@ -629,20 +663,61 @@ nsSimplePageSequenceFrame::PrintNextPage
 
       nsRefPtr<nsRenderingContext> renderingContext;
       dc->CreateRenderingContext(*getter_AddRefs(renderingContext));
       NS_ENSURE_TRUE(renderingContext, NS_ERROR_OUT_OF_MEMORY);
 
       nsRect drawingRect(nsPoint(0, 0),
                          mCurrentPageFrame->GetSize());
       nsRegion drawingRegion(drawingRect);
+
+
+      // Replace the underlaying context off all canvas that are "printCanvas".
+      nsRefPtr<gfxASurface> renderingSurface =
+          renderingContext->ThebesContext()->CurrentSurface();
+
+      nsTArray<nsRefPtr<nsHTMLCanvasElement> > canvasList;
+      GetCanvasElementsInFrame(&canvasList, mCurrentPageFrame);
+      for (PRInt32 i = canvasList.Length() - 1; i >= 0 ; i--) {
+        nsHTMLCanvasElement *canvas = canvasList[i];
+        nsIntSize size = canvas->GetSize();
+
+        nsRefPtr<gfxASurface> printSurface = renderingSurface->
+           CreateSimilarSurface(
+             gfxASurface::CONTENT_COLOR_ALPHA,
+             size
+           );
+
+        nsICanvasRenderingContextInternal *ctx = canvas->GetContextAtIndex(0);
+
+        if (!ctx)
+          continue;
+
+        // Initialize the context with the new printSurface.
+        ctx->InitializeWithSurface(NULL, printSurface, size.width, size.height);
+
+        // Only specify here, that this canvas won't be printed to preview.
+        // The actuall drawing is done once the nsHTMLCanvasFrame::BuildLayer
+        // function calls the canvas->HandlePrintCallback();
+        canvas->mIsPrintPreview = false;
+      }
+
       nsLayoutUtils::PaintFrame(renderingContext, mCurrentPageFrame,
                                 drawingRegion, NS_RGBA(0,0,0,0),
                                 nsLayoutUtils::PAINT_SYNC_DECODE_IMAGES);
 
+      // Loop over the canvasList list again and clear out the no longer
+      // needed surface and context to save memeory.
+      for (PRInt32 i = canvasList.Length() - 1; i >= 0 ; i--) {
+        nsICanvasRenderingContextInternal *ctx = canvasList[i]->GetContextAtIndex(0);
+
+        if (ctx)
+          ctx->Reset();
+      }
+
       if (mSelectionHeight >= 0 && selectionY < mSelectionHeight) {
         selectionY += height;
         printedPageNum++;
         pf->SetPageNumInfo(printedPageNum, mTotalPages);
         conFrame->SetPosition(conFrame->GetPosition() + nsPoint(0, -height));
         nsContainerFrame::PositionChildViews(conFrame);
 
         PR_PL(("***************** End Page (PrintNextPage) *****************\n"));
