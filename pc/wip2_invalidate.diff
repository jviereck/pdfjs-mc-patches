# HG changeset patch
# Parent 6ee87caf710b41fcea52b42f226428565e6202b2

diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -998,16 +998,17 @@ nsCanvasRenderingContext2D::ApplyStyle(S
     mThebes->SetColor(color);
 }
 
 nsresult
 nsCanvasRenderingContext2D::Redraw()
 {
     if (mIsEntireFrameInvalid)
         return NS_OK;
+
     mIsEntireFrameInvalid = true;
 
     if (!mCanvasElement) {
         NS_ASSERTION(mDocShell, "Redraw with no canvas element or docshell!");
         return NS_OK;
     }
 
     nsSVGEffects::InvalidateDirectRenderingObservers(HTMLCanvasElement());
@@ -1016,17 +1017,17 @@ nsCanvasRenderingContext2D::Redraw()
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::Redraw(const gfxRect& r)
 {
     ++mInvalidateCount;
-
+  
     if (mIsEntireFrameInvalid)
         return NS_OK;
 
     if (mPredictManyRedrawCalls ||
         mInvalidateCount > kCanvasMaxInvalidateCount) {
         return Redraw();
     }
 
@@ -4189,17 +4190,20 @@ nsCanvasRenderingContext2D::GetCanvasLay
     }
 
     nsRefPtr<CanvasLayer> canvasLayer = aManager->CreateCanvasLayer();
     if (!canvasLayer) {
         NS_WARNING("CreateCanvasLayer returned null!");
         return nsnull;
     }
     CanvasRenderingContext2DUserData *userData = nsnull;
-    if (aBuilder->IsPaintingToWindow()) {
+    printf("=== nsCanvasRenderingContext2D::GetCanvasLayer - IsPaintingToWindow()=%s\n", 
+            aBuilder->IsPaintingToWindow() ? "true" : "false");
+    // if (aBuilder->IsPaintingToWindow()) {
+    if (true) {
       // Make the layer tell us whenever a transaction finishes (including
       // the current transaction), so we can clear our invalidation state and
       // start invalidating again. We need to do this for the layer that is
       // being painted to a window (there shouldn't be more than one at a time,
       // and if there is, flushing the invalidation state more often than
       // necessary is harmless).
 
       // The layer will be destroyed when we tear down the presentation
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -217,22 +217,19 @@ nsHTMLCanvasElement::SetAttr(PRInt32 aNa
 
 bool
 nsHTMLCanvasElement::HandlePrintCallback()
 {
   printf("=== HandlePrintCallback\n");
   // If the canvas is a printCanvas and the printing target is real paper,
   // then the canvas is setup in nsSimplePageSequence::PrePagePrintNext().
   if (mIsReadyToPrint || !mIsPrintCanvas || !mIsPrintPreview) {
-    printf("=== handleprintcallback:early quit\n");
     return true;
   }
 
-  printf("=== HandlePrintCallback:continue\n");
-
   mIsReadyToPrint = true;
   CallPrintCallback(nsnull);
   return true;
 }
 
 void
 nsHTMLCanvasElement::CallPrintCallback(nsITimerCallback *aCallback)
 {
@@ -835,21 +832,24 @@ void
 nsHTMLCanvasElement::SetWriteOnly()
 {
   mWriteOnly = true;
 }
 
 void
 nsHTMLCanvasElement::InvalidateCanvasContent(const gfxRect* damageRect)
 {
+  printf("nsHTMLCanvasElement:;InvalidateCanvasContent - Entry\n");
   // We don't need to flush anything here; if there's no frame or if
   // we plan to reframe we don't need to invalidate it anyway.
   nsIFrame *frame = GetPrimaryFrame();
-  if (!frame)
+  if (!frame) {
+    printf("nsHTMLCanvasElement:;InvalidateCanvasContent - Early Quit\n");
     return;
+  }
 
   frame->MarkLayersActive(nsChangeHint(0));
 
   nsRect invalRect;
   nsRect contentArea = frame->GetContentRect();
   if (damageRect) {
     nsIntSize size = GetWidthHeight();
     if (size.width != 0 && size.height != 0) {
@@ -868,16 +868,20 @@ nsHTMLCanvasElement::InvalidateCanvasCon
 
       invalRect = invalRect.Intersect(nsRect(nsPoint(0,0), contentArea.Size()));
     }
   } else {
     invalRect = nsRect(nsPoint(0, 0), contentArea.Size());
   }
   invalRect.MoveBy(contentArea.TopLeft() - frame->GetPosition());
 
+  printf("nsHTMLCanvasElement:;InvalidateCanvasContent - Invalidate\n");
+
+  printf("rect: %d,%d,%d,%d\n", invalRect.x, invalRect.y, invalRect.width, invalRect.height);
+
   Layer* layer = frame->InvalidateLayer(invalRect, nsDisplayItem::TYPE_CANVAS);
   if (layer) {
     static_cast<CanvasLayer*>(layer)->Updated();
   }
 }
 
 void
 nsHTMLCanvasElement::InvalidateCanvas()
diff --git a/gfx/layers/Layers.h b/gfx/layers/Layers.h
--- a/gfx/layers/Layers.h
+++ b/gfx/layers/Layers.h
@@ -1312,16 +1312,17 @@ public:
   void Updated() { mDirty = true; }
 
   /**
    * Register a callback to be called at the end of each transaction.
    */
   typedef void (* DidTransactionCallback)(void* aClosureData);
   void SetDidTransactionCallback(DidTransactionCallback aCallback, void* aClosureData)
   {
+    printf("=== CanvasLayer::SetDidTransactionCallback\n");
     mCallback = aCallback;
     mCallbackData = aClosureData;
   }
 
   /**
    * CONSTRUCTION PHASE ONLY
    * Set the filter used to resample this image (if necessary).
    */
@@ -1342,17 +1343,19 @@ public:
         SnapTransform(aTransformToSurface, gfxRect(0, 0, 0, 0), nsnull);
     ComputeEffectiveTransformForMaskLayer(aTransformToSurface);
   }
 
 protected:
   CanvasLayer(LayerManager* aManager, void* aImplData)
     : Layer(aManager, aImplData),
       mCallback(nsnull), mCallbackData(nsnull), mFilter(gfxPattern::FILTER_GOOD),
-      mDirty(false) {}
+      mDirty(false) {
+    printf("=== CanvasLayer::CanvasLayer aka. INIT\n");
+  }
 
   virtual nsACString& PrintInfo(nsACString& aTo, const char* aPrefix);
 
   void FireDidTransactionCallback()
   {
     if (mCallback) {
       mCallback(mCallbackData);
     }
diff --git a/layout/generic/nsHTMLCanvasFrame.cpp b/layout/generic/nsHTMLCanvasFrame.cpp
--- a/layout/generic/nsHTMLCanvasFrame.cpp
+++ b/layout/generic/nsHTMLCanvasFrame.cpp
@@ -274,16 +274,19 @@ nsHTMLCanvasFrame::BuildLayer(nsDisplayL
     return nsnull;
 
   nsPresContext* presContext = PresContext();
   gfxRect r = gfxRect(presContext->AppUnitsToGfxUnits(area.x),
                       presContext->AppUnitsToGfxUnits(area.y),
                       presContext->AppUnitsToGfxUnits(area.width),
                       presContext->AppUnitsToGfxUnits(area.height));
 
+  printf("=== nsHTMLCanvasFrame::BuildLayer r=(%2.2f, %2.2f, %2.2f, %2.2f)\n",
+    r.x, r.y, r.width, r.height);
+
   // Transform the canvas into the right place
   gfxMatrix transform;
   transform.Translate(r.TopLeft());
   transform.Scale(r.Width()/canvasSize.width, r.Height()/canvasSize.height);
   layer->SetTransform(gfx3DMatrix::From2D(transform));
   layer->SetFilter(nsLayoutUtils::GetGraphicsFilterForFrame(this));
   layer->SetVisibleRegion(nsIntRect(0, 0, canvasSize.width, canvasSize.height));
 
