# HG changeset patch
# Parent 439ad957820285e0887a82a1144bc028125e64c9

diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -22,16 +22,17 @@
 #include "mozilla/Telemetry.h"
 
 #include "nsFrameManager.h"
 #include "nsDisplayList.h"
 #include "ImageLayers.h"
 #include "BasicLayers.h"
 #include "imgIEncoder.h"
 #include "nsITimer.h"
+#include "nsAsyncDOMEvent.h"
 
 #include "nsIWritablePropertyBag2.h"
 
 #include "nsIDOMHTMLCanvasElement.h"
 
 #define DEFAULT_CANVAS_WIDTH 300
 #define DEFAULT_CANVAS_HEIGHT 150
 
@@ -42,19 +43,22 @@ using namespace mozilla::layers;
 #define NS_ICANVASPRINTSTATE_IID \
    {0x8d5fb8a0, 0x7782, 0x11e1, { 0xb0, 0xc4, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x67 }} 
 
 class nsCanvasPrintState : public nsICanvasPrintState
 {
 public:
   NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICANVASPRINTSTATE_IID)
 
-  nsCanvasPrintState(nsICanvasRenderingContextInternal *aContext, nsITimerCallback *aCallback)
-      : mIsDone(false), mIsAborted(false), mContext(aContext), mCallback(aCallback)
-  {
+  nsCanvasPrintState(
+      nsHTMLCanvasElement *aCanvas,
+      nsICanvasRenderingContextInternal *aContext, 
+      nsITimerCallback *aCallback)
+  : mIsDone(false), mIsAborted(false),
+    mCanvas(aCanvas), mContext(aContext), mCallback(aCallback) {
   }
 
   NS_IMETHOD GetContext(nsISupports **context)
   {
     printf("=== GetContext2\n");
     NS_ADDREF(*context = mContext);
     return NS_OK;
   }
@@ -65,16 +69,19 @@ public:
     Finalize(false);
     return NS_OK;
   }
 
   NS_IMETHOD Abort()
   {
     printf("CPS::Abort\n");
     Finalize(true);
+    (new nsAsyncDOMEvent(
+       mCanvas->GetDocument(), NS_LITERAL_STRING("printCanvasAbort"), true, true)
+    )->RunDOMEventWhenSafe();
     return NS_OK;
   }
 
   void Finalize(bool aAborted)
   {
     if (!mIsDone) {
       mIsDone = true;
       mIsAborted = aAborted;
@@ -97,16 +104,17 @@ public:
   
   NS_DECL_ISUPPORTS
 private:
   ~nsCanvasPrintState() 
   {
     printf("--- nsCanvasPrintState::Destory\n");
   }
 
+  nsRefPtr<nsHTMLCanvasElement> mCanvas;
   nsCOMPtr<nsICanvasRenderingContextInternal> mContext;
   nsCOMPtr<nsITimerCallback> mCallback;
 protected:
   /* additional members */
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsCanvasPrintState, NS_ICANVASPRINTSTATE_IID) 
 
@@ -230,17 +238,17 @@ nsHTMLCanvasElement::HandlePrintCallback
   return true;
 }
 
 void
 nsHTMLCanvasElement::CallPrintCallback(nsITimerCallback *aCallback)
 {
   printf("=== CE::CallPrintCallback\n");
   // ??? Any ADD_REF magic to be done here ???
-  mPrintState = new nsCanvasPrintState(mCurrentContext, aCallback);
+  mPrintState = new nsCanvasPrintState(this, mCurrentContext, aCallback);
   mPrintCallback->Render(mPrintState);
 }
 
 void
 nsHTMLCanvasElement::ResetPrintCallback()
 {
   if (mPrintState) {
     mPrintState->Reset();
diff --git a/toolkit/components/printing/content/printPreviewBindings.xml b/toolkit/components/printing/content/printPreviewBindings.xml
--- a/toolkit/components/printing/content/printPreviewBindings.xml
+++ b/toolkit/components/printing/content/printPreviewBindings.xml
@@ -128,16 +128,40 @@
       <constructor>
       <![CDATA[
         var print = PrintUtils.getPrintPreview();
         this.mTotalPages.value = print.printPreviewNumPages;
         this.mPageTextBox.max = print.printPreviewNumPages;
 
         this.updateToolbar();
 
+        /*
+        function closeOnPrintCanvasAbort() {
+          Components.utils.reportError("closeOnPrintCanvasAbort");
+          PrintUtils.exitPrintPreview();
+
+          document.removeEventListener(
+            "printCanvasAbort", closeOnPrintCanvasAbort);
+        }
+        // If a printCanvas aborts, then close print preview.
+        document.addEventListener("printCanvasAbort",
+          closeOnPrintCanvasAbort, false);
+
+        function onCloseWindow() {
+          Components.utils.reportError("beforeunload");
+          document.removeEventListener(
+            "printCanvasAbort", closeOnPrintCanvasAbort);
+          window.removeEventListener(
+            "close", onCloseWindow();
+        }
+
+        // Remove the printCanasAbort event again when closing the window.
+        window.addEventListener("close", , false);
+        */
+
         // Hide the ``Print...'' button when the underlying gfx code does not
         // support multiple devicecontext to be used concurrently
         // (e.g. printing and printpreview at the same time; required as 
         // legacy support for unices.'s PostScript module
         // XXX the scaling widgets, and the orientation widgets on unices.
         var canPrint = true;
         try
         {
@@ -191,16 +215,31 @@
 
             // Now do PrintPreview
             PrintUtils.printPreview();
           }
         ]]>
         </body>
       </method>
 
+      <method name="doPageSetup">
+        <body>
+        <![CDATA[
+          var didOK = PrintUtils.showPageSetup();
+          if (didOK) {
+            // the changes that effect the UI
+            this.updateToolbar();
+
+            // Now do PrintPreview
+            PrintUtils.printPreview();
+          }
+        ]]>
+        </body>
+      </method>
+
       <method name="navigate">
         <parameter name="aDirection"/>
         <parameter name="aPageNum"/>
         <parameter name="aHomeOrEnd"/>
         <body>
         <![CDATA[          
           var print = PrintUtils.getPrintPreview();
 
diff --git a/toolkit/components/printing/content/printUtils.js b/toolkit/components/printing/content/printUtils.js
--- a/toolkit/components/printing/content/printUtils.js
+++ b/toolkit/components/printing/content/printUtils.js
@@ -157,16 +157,17 @@ var PrintUtils = {
   },
 
   _closeHandlerPP: null,
   _webProgressPP: null,
   _callback: null,
   _sourceBrowser: null,
   _originalTitle: "",
   _originalURL: "",
+  _exitPrintPreview: null,
 
   // This observer is called once the progress dialog has been "opened"
   _obsPP: 
   {
     observe: function(aSubject, aTopic, aData)
     {
       // delay the print preview to show the content of the progress dialog
       setTimeout(function () { PrintUtils.enterPrintPreview(); }, 0);
@@ -232,32 +233,41 @@ var PrintUtils = {
       this._closeHandlerPP = document.documentElement.getAttribute("onclose");
     else
       this._closeHandlerPP = null;
     document.documentElement.setAttribute("onclose", "PrintUtils.exitPrintPreview(); return false;");
 
     // disable chrome shortcuts...
     window.addEventListener("keypress", this.onKeyPressPP, true);
 
+    // close print preview if a print canvas got aborted.
+    this._exitPrintPreview = this.exitPrintPreview.bind(this);
+    document.documentElement.addEventListener("printCanvasAbort",
+        this.exitPrintPreview, true);
+
     var browser = this._callback.getPrintPreviewBrowser();
     browser.collapsed = false;
     browser.contentWindow.focus();
 
     // on Enter PP Call back
     this._callback.onEnter();
   },
 
   exitPrintPreview: function ()
   {
+    Components.utils.reportError("exitPrintPreview");
+
     window.removeEventListener("keypress", this.onKeyPressPP, true);
 
     // restore the old close handler
     document.documentElement.setAttribute("onclose", this._closeHandlerPP);
     this._closeHandlerPP = null;
 
+    document.documentElement.removeEventListener("printCanvasAbort", this.exitPrintPreview, true);
+
     var webBrowserPrint = this.getPrintPreview();
     webBrowserPrint.exitPrintPreview();
 
     // remove the print preview toolbar
     var printPreviewTB = document.getElementById("print-preview-toolbar");
     this._callback.getNavToolbox().parentNode.removeChild(printPreviewTB);
 
     var fm = Components.classes["@mozilla.org/focus-manager;1"]
@@ -295,8 +305,11 @@ var PrintUtils = {
     }
     // cancel shortkeys
     if (isModif) {
       aEvent.preventDefault();
       aEvent.stopPropagation();
     }
   }
 }
+
+// Make an explicit binding such that addEventListener/removeEventListener work.
+PrintUtils.exitPrintPreview = PrintUtils.exitPrintPreview.bind(PrintUtils);
