# HG changeset patch
# Parent 9047318e9ee8954676feba1636685315ddfb15b4

diff --git a/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp b/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
@@ -1021,16 +1021,17 @@ NS_NewCanvasRenderingContext2DAzure(nsID
 nsCanvasRenderingContext2DAzure::nsCanvasRenderingContext2DAzure()
   : mValid(false), mZero(false), mOpaque(false), mResetLayer(true)
   , mIPC(false)
   , mCanvasElement(nsnull)
   , mIsEntireFrameInvalid(false)
   , mPredictManyRedrawCalls(false), mPathTransformWillUpdate(false)
   , mInvalidateCount(0)
 {
+  printf("=== nsCanvasRenderingContext2DAzure::nsCanvasRenderingContext2DAzure()\n");
   sNumLivingContexts++;
 }
 
 nsCanvasRenderingContext2DAzure::~nsCanvasRenderingContext2DAzure()
 {
   Reset();
   sNumLivingContexts--;
   if (!sNumLivingContexts) {
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -324,26 +324,28 @@ nsHTMLCanvasElement::CopyInnerTo(nsGener
     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
     nsHTMLCanvasElement* self = const_cast<nsHTMLCanvasElement*>(this);
 
     // By default, we assume this canvas will be displayed in PrintPreview.
     dest->mIsPrintPreview = true;
     dest->mPrintCallback = self->mPrintCallback;
     dest->mOriginalCanvas = self;
 
+    // Mark the canvas to be a "PrintCanvas" in case there is a special
+    // rendering callback for printing.
+    // Set this flag BEFORE creating a new "2d" context, as it forces the
+    // context to be a Cairo (not Azure) one.
+    if (dest->mPrintCallback) {
+      dest->mIsPrintCanvas = true;
+    }
+
     nsCOMPtr<nsISupports> cxt;
     dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
     nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
 
-    // Mark the canvas to be a "PrintCanvas" in case there is a special
-    // rendering callback for printing.
-    if (dest->mPrintCallback) {
-      dest->mIsPrintCanvas = true;
-    }
-    
     if (context2d && !dest->mIsPrintCanvas) {
       context2d->DrawImage(self,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
     }
   }
   return rv;
 }
 
