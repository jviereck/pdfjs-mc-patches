diff --git a/content/canvas/public/nsICanvasRenderingContextInternal.h b/content/canvas/public/nsICanvasRenderingContextInternal.h
--- a/content/canvas/public/nsICanvasRenderingContextInternal.h
+++ b/content/canvas/public/nsICanvasRenderingContextInternal.h
@@ -81,16 +81,18 @@ public:
   // This method should NOT hold a ref to aParentCanvas; it will be called
   // with nsnull when the element is going away.
   NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas) = 0;
 
   // Sets the dimensions of the canvas, in pixels.  Called
   // whenever the size of the element changes.
   NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height) = 0;
 
+  NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height) = 0;
+
   NS_IMETHOD InitializeWithSurface(nsIDocShell *docShell, gfxASurface *surface, PRInt32 width, PRInt32 height) = 0;
 
   // Render the canvas at the origin of the given gfxContext
   NS_IMETHOD Render(gfxContext *ctx,
                     gfxPattern::GraphicsFilter aFilter,
                     PRUint32 aFlags = RenderFlagPremultAlpha) = 0;
 
   // Gives you a stream containing the image represented by this context.
diff --git a/content/canvas/src/WebGLContext.cpp b/content/canvas/src/WebGLContext.cpp
--- a/content/canvas/src/WebGLContext.cpp
+++ b/content/canvas/src/WebGLContext.cpp
@@ -346,16 +346,24 @@ WebGLContext::SetContextOptions(nsIPrope
         // aren't the same as what they were originally.
         return NS_ERROR_FAILURE;
     }
 
     mOptions = newOpts;
     return NS_OK;
 }
 
+
+NS_IMETHODIMP
+WebGLContext::AdjustToSize(PRInt32 width, PRInt32 height)
+{
+  // TODO: Implement me!
+  return NS_OK;
+}
+
 NS_IMETHODIMP
 WebGLContext::SetDimensions(PRInt32 width, PRInt32 height)
 {
     /*** early success return cases ***/
   
     if (mCanvasElement) {
         HTMLCanvasElement()->InvalidateCanvas();
     }
diff --git a/content/canvas/src/WebGLContext.h b/content/canvas/src/WebGLContext.h
--- a/content/canvas/src/WebGLContext.h
+++ b/content/canvas/src/WebGLContext.h
@@ -544,16 +544,17 @@ public:
 
     // nsICanvasRenderingContextInternal
     NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas);
     nsHTMLCanvasElement* HTMLCanvasElement() {
         return static_cast<nsHTMLCanvasElement*>(mCanvasElement.get());
     }
 
     NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height);
+    NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height);
     NS_IMETHOD InitializeWithSurface(nsIDocShell *docShell, gfxASurface *surface, PRInt32 width, PRInt32 height)
         { return NS_ERROR_NOT_IMPLEMENTED; }
     NS_IMETHOD Reset()
         { /* (InitializeWithSurface) */ return NS_ERROR_NOT_IMPLEMENTED; }
     NS_IMETHOD Render(gfxContext *ctx,
                       gfxPattern::GraphicsFilter f,
                       PRUint32 aFlags = RenderFlagPremultAlpha);
     NS_IMETHOD GetInputStream(const char* aMimeType,
diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -342,16 +342,18 @@ class nsCanvasRenderingContext2D :
 public:
     nsCanvasRenderingContext2D();
     virtual ~nsCanvasRenderingContext2D();
 
     nsresult Redraw();
 
     // nsICanvasRenderingContextInternal
     NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas);
+    NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height);
+    void ExternalScaleMatrix(gfxMatrix &matrix);
     NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height);
     void Initialize(nsIDocShell *shell, PRInt32 width, PRInt32 height);
     NS_IMETHOD InitializeWithSurface(nsIDocShell *shell, gfxASurface *surface, PRInt32 width, PRInt32 height);
     bool EnsureSurface();
     NS_IMETHOD Render(gfxContext *ctx,
                       gfxPattern::GraphicsFilter aFilter,
                       PRUint32 aFlags = RenderFlagPremultAlpha);
     NS_IMETHOD GetInputStream(const char* aMimeType,
@@ -460,16 +462,19 @@ protected:
     /**
      * Returns the image format this canvas should be allocated using. Takes
      * into account mOpaque, platform requirements, etc.
      */
     gfxASurface::gfxImageFormat GetImageFormat() const;
 
     // Member vars
     PRInt32 mWidth, mHeight;
+    PRInt32 mExternalWidth, mExternalHeight;
+    bool mExternalScale;
+    float mExternalScaleX, mExternalScaleY;
     bool mValid;
     bool mZero;
     bool mOpaque;
     bool mResetLayer;
     bool mIPC;
 
     // the canvas element we're a context of
     nsCOMPtr<nsIDOMHTMLCanvasElement> mCanvasElement;
@@ -826,22 +831,24 @@ NS_NewCanvasRenderingContext2DThebes(nsI
     if (!ctx)
         return NS_ERROR_OUT_OF_MEMORY;
 
     *aResult = ctx.forget().get();
     return NS_OK;
 }
 
 nsCanvasRenderingContext2D::nsCanvasRenderingContext2D()
-    : mValid(false), mZero(false), mOpaque(false), mResetLayer(true)
+    : mExternalScale(false)
+    , mValid(false), mZero(false), mOpaque(false), mResetLayer(true)
     , mIPC(false)
     , mCanvasElement(nsnull)
     , mSaveCount(0), mIsEntireFrameInvalid(false)
     , mPredictManyRedrawCalls(false), mHasPath(false), mInvalidateCount(0)
     , mLastStyle(STYLE_MAX), mStyleStack(20)
+
 {
     sNumLivingContexts++;
 }
 
 nsCanvasRenderingContext2D::~nsCanvasRenderingContext2D()
 {
     Reset();
     sNumLivingContexts--;
@@ -1089,26 +1096,55 @@ nsCanvasRenderingContext2D::RedrawUser(c
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetDimensions(PRInt32 width, PRInt32 height)
 {
     Initialize(NULL, width, height);
     return NS_OK;
 }
 
+/**
+ * Changes the size of the context to some new width/height, but for the user,
+ * the context keeps the current "dimensions".
+ */
+NS_IMETHODIMP
+nsCanvasRenderingContext2D::AdjustToSize(PRInt32 width, PRInt32 height)
+{
+    if (!EnsureSurface())
+        return NS_ERROR_FAILURE;
+
+    if (width == 0 || height == 0)
+        return NS_ERROR_FAILURE;
+
+    PRInt32 oldWidth = mWidth, oldHeight = mHeight;
+
+    SetDimensions(width, height);
+    mExternalWidth = width;
+    mExternalHeight = height;
+    mExternalScaleX = ((float)mWidth)/((float)oldWidth);
+    mExternalScaleY = ((float)mHeight)/((float)oldHeight);
+    mExternalScale = true;
+    Scale(mExternalScaleX, mExternalScaleY);
+
+    return NS_OK;
+}
+
 void
 nsCanvasRenderingContext2D::Initialize(nsIDocShell *docShell, PRInt32 width, PRInt32 height) 
 {
     Reset();
 
     NS_ASSERTION(!docShell ^ !mCanvasElement, "Cannot set both docshell and canvas element");
     mDocShell = docShell;
 
-    mWidth = width;
-    mHeight = height;
+    mWidth = mExternalWidth = width;
+    mExternalScaleX = 1.0;
+    mHeight = mExternalHeight = height;
+    mExternalScaleY = 1.0;
+    mExternalScale = false;
 
     mResetLayer = true;
     mValid = true;
     mSurfaceCreated = false;
 
     // set up the initial canvas defaults
     mStyleStack.Clear();
     mSaveCount = 0;
@@ -1179,16 +1215,21 @@ nsCanvasRenderingContext2D::EnsureSurfac
 
     // Check that the dimensions are sane
     if (gfxASurface::CheckSurfaceSize(gfxIntSize(mWidth, mHeight), 0xffff)) {
         // Zero sized surfaces have problems, so just use a 1 by 1.
         if (mHeight == 0 || mWidth == 0) {
             mZero = true;
             mHeight = 1;
             mWidth = 1;
+            mExternalScaleX = 1.0;
+            mExternalScaleY = 1.0;
+            mExternalHeight = 1;
+            mExternalWidth = 1;
+            mExternalScale = false;
         } else {
             mZero = false;
         }
 
         gfxASurface::gfxImageFormat format = GetImageFormat();
 
         if (!PR_GetEnv("MOZ_CANVAS_IMAGE_SURFACE")) {
             nsCOMPtr<nsIContent> content = do_QueryObject(mCanvasElement);
@@ -1488,26 +1529,43 @@ nsCanvasRenderingContext2D::Transform(fl
         return NS_OK;
 
     gfxMatrix matrix(m11, m12, m21, m22, dx, dy);
     mThebes->Multiply(matrix);
 
     return NS_OK;
 }
 
+void
+nsCanvasRenderingContext2D::ExternalScaleMatrix(gfxMatrix &matrix)
+{
+    float sx = mExternalScaleX;
+    float sy = mExternalScaleY;
+    matrix.xx *= sx;
+    matrix.xy *= sx;
+    matrix.x0 *= sx;
+    matrix.yx *= sy;
+    matrix.yy *= sy;
+    matrix.y0 *= sy;
+}
+
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetTransform(float m11, float m12, float m21, float m22, float dx, float dy)
 {
     if (!EnsureSurface())
         return NS_ERROR_FAILURE;
 
     if (!FloatValidate(m11,m12,m21,m22,dx,dy))
         return NS_OK;
 
     gfxMatrix matrix(m11, m12, m21, m22, dx, dy);
+
+    if (mExternalScale)
+        ExternalScaleMatrix(matrix);
+
     mThebes->SetMatrix(matrix);
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::SetMozCurrentTransform(JSContext* cx,
                                                    const jsval& matrix)
@@ -1517,16 +1575,19 @@ nsCanvasRenderingContext2D::SetMozCurren
     
     if (!EnsureSurface())
         return NS_ERROR_FAILURE;
 
     if (!JSValToMatrix(cx, matrix, &newCTM, &rv)) {
         return rv;
     }
 
+    if (mExternalScale)
+        ExternalScaleMatrix(newCTM);
+
     mThebes->SetMatrix(newCTM);
 
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCanvasRenderingContext2D::GetMozCurrentTransform(JSContext* cx,
                                                    jsval* matrix)
@@ -3954,33 +4015,34 @@ nsCanvasRenderingContext2D::GetImageData
         return NS_ERROR_FAILURE;
 
     nsRefPtr<gfxContext> tmpctx = new gfxContext(tmpsurf);
 
     if (tmpctx->HasError())
         return NS_ERROR_FAILURE;
 
     if (!mZero) {
-        gfxRect srcRect(0, 0, mWidth, mHeight);
+        gfxRect srcRect(0, 0, mExternalWidth, mExternalHeight);
         gfxRect destRect(aX, aY, aWidth, aHeight);
 
         bool finishedPainting = false;
         // In the common case, we want to avoid the Rectangle call.
         if (!srcRect.Contains(destRect)) {
             // If the requested area is entirely outside the canvas, we're done.
             gfxRect tmp = srcRect.Intersect(destRect);
             finishedPainting = tmp.IsEmpty();
 
             // Set clipping region if necessary.
             if (!finishedPainting) {
                 tmpctx->Rectangle(tmp);
             }
         }
 
         if (!finishedPainting) {
+            tmpctx->Scale(1.0/mExternalScaleX, 1.0/mExternalScaleY);
             tmpctx->SetOperator(gfxContext::OPERATOR_SOURCE);
             tmpctx->SetSource(mSurface, gfxPoint(-aX, -aY));
             tmpctx->Paint();
         }
     }
 
     // make sure sUnpremultiplyTable has been created
     EnsureUnpremultiplyTable();
@@ -4089,17 +4151,17 @@ nsCanvasRenderingContext2D::PutImageData
 
         if (dirtyRect.Width() <= 0 || dirtyRect.Height() <= 0)
             return NS_OK;
     } else {
         dirtyRect = imageDataRect;
     }
 
     dirtyRect.MoveBy(gfxPoint(x, y));
-    dirtyRect = gfxRect(0, 0, mWidth, mHeight).Intersect(dirtyRect);
+    dirtyRect = gfxRect(0, 0, mExternalWidth, mExternalHeight).Intersect(dirtyRect);
 
     if (dirtyRect.Width() <= 0 || dirtyRect.Height() <= 0)
         return NS_OK;
 
     PRUint32 len = w * h * 4;
     if (aDataLen != len)
         return NS_ERROR_DOM_SYNTAX_ERR;
 
@@ -4138,16 +4200,17 @@ nsCanvasRenderingContext2D::PutImageData
 
     PathAutoSaveRestore pathSR(this);
     gfxContextAutoSaveRestore autoSR(mThebes);
 
     // ignore clipping region, as per spec
     mThebes->ResetClip();
 
     mThebes->IdentityMatrix();
+    mThebes->Scale(mExternalScaleX, mExternalScaleY);
     mThebes->NewPath();
     mThebes->Rectangle(dirtyRect);
     mThebes->SetSource(imgsurf, gfxPoint(x, y));
     mThebes->SetOperator(gfxContext::OPERATOR_SOURCE);
     mThebes->Fill();
 
     return Redraw(dirtyRect);
 }
diff --git a/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp b/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2DAzure.cpp
@@ -397,16 +397,17 @@ class nsCanvasRenderingContext2DAzure :
 public:
   nsCanvasRenderingContext2DAzure();
   virtual ~nsCanvasRenderingContext2DAzure();
 
   nsresult Redraw();
 
   // nsICanvasRenderingContextInternal
   NS_IMETHOD SetCanvasElement(nsHTMLCanvasElement* aParentCanvas);
+  NS_IMETHOD AdjustToSize(PRInt32 width, PRInt32 height);
   NS_IMETHOD SetDimensions(PRInt32 width, PRInt32 height);
   NS_IMETHOD InitializeWithSurface(nsIDocShell *shell, gfxASurface *surface, PRInt32 width, PRInt32 height)
   { return NS_ERROR_NOT_IMPLEMENTED; }
 
   NS_IMETHOD Render(gfxContext *ctx,
                     gfxPattern::GraphicsFilter aFilter,
                     PRUint32 aFlags = RenderFlagPremultAlpha);
   NS_IMETHOD GetInputStream(const char* aMimeType,
@@ -1286,16 +1287,24 @@ nsCanvasRenderingContext2DAzure::SetDime
     if (context) {
       JS_updateMallocCounter(context, width * height * 4);
     }
   }
 
   return InitializeWithTarget(target, width, height);
 }
 
+NS_IMETHODIMP
+nsCanvasRenderingContext2DAzure::AdjustToSize(PRInt32 width, PRInt32 height)
+{
+  // TODO: Implement me!
+  return NS_OK;
+}
+
+
 nsresult
 nsCanvasRenderingContext2DAzure::InitializeWithTarget(DrawTarget *target, PRInt32 width, PRInt32 height)
 {
   Reset();
 
   NS_ASSERTION(mCanvasElement, "Must have a canvas element!");
   mDocShell = nsnull;
 
diff --git a/content/html/content/public/nsHTMLCanvasElement.h b/content/html/content/public/nsHTMLCanvasElement.h
--- a/content/html/content/public/nsHTMLCanvasElement.h
+++ b/content/html/content/public/nsHTMLCanvasElement.h
@@ -51,16 +51,17 @@
 #include "nsICanvasRenderingContextInternal.h"
 #include "nsICanvasElementExternal.h"
 #include "nsIDOMCanvasRenderingContext2D.h"
 #include "nsLayoutUtils.h"
 
 #include "Layers.h"
 
 class nsIDOMFile;
+class nsCanvasPrintState;
 
 class nsHTMLCanvasElement : public nsGenericHTMLElement,
                             public nsICanvasElementExternal,
                             public nsIDOMHTMLCanvasElement
 {
   typedef mozilla::layers::CanvasLayer CanvasLayer;
   typedef mozilla::layers::LayerManager LayerManager;
 
@@ -200,19 +201,32 @@ protected:
   nsresult MozGetAsFileImpl(const nsAString& aName,
                             const nsAString& aType,
                             nsIDOMFile** aResult);
   nsresult GetContextHelper(const nsAString& aContextId,
                             bool aForceThebes,
                             nsICanvasRenderingContextInternal **aContext);
 
   nsString mCurrentContextId;
+
+  bool mIsReadyToPrint;
+
+  nsCOMPtr<nsIPrintCallback> mPrintCallback;
   nsCOMPtr<nsICanvasRenderingContextInternal> mCurrentContext;
-  
+  nsCOMPtr<nsCanvasPrintState> mPrintState;
 public:
   // Record whether this canvas should be write-only or not.
   // We set this when script paints an image from a different origin.
   // We also transitively set it when script paints a canvas which
   // is itself write-only.
   bool                     mWriteOnly;
+
+  bool mIsPrintCanvas;
+  bool mIsPrintPreview;
+  
+  bool IsPrintCallbackDone();
+
+  bool HandlePrintCallback(nsIntSize &size);
+
+  void CallPrintCallback();
 };
 
 #endif /* nsHTMLCanvasElement_h__ */
diff --git a/content/html/content/src/nsHTMLCanvasElement.cpp b/content/html/content/src/nsHTMLCanvasElement.cpp
--- a/content/html/content/src/nsHTMLCanvasElement.cpp
+++ b/content/html/content/src/nsHTMLCanvasElement.cpp
@@ -56,37 +56,98 @@
 #include "nsFrameManager.h"
 #include "nsDisplayList.h"
 #include "ImageLayers.h"
 #include "BasicLayers.h"
 #include "imgIEncoder.h"
 
 #include "nsIWritablePropertyBag2.h"
 
+#include "nsIDOMHTMLCanvasElement.h"
+
 #define DEFAULT_CANVAS_WIDTH 300
 #define DEFAULT_CANVAS_HEIGHT 150
 
 using namespace mozilla;
 using namespace mozilla::dom;
 using namespace mozilla::layers;
 
+#define NS_ICANVASPRINTSTATE_IID \
+   {0x8d5fb8a0, 0x7782, 0x11e1, { 0xb0, 0xc4, 0x08, 0x00, 0x20, 0x0c, 0x9a, 0x67 }} 
+
+class nsCanvasPrintState : public nsICanvasPrintState
+{
+public:
+  NS_DECLARE_STATIC_IID_ACCESSOR(NS_ICANVASPRINTSTATE_IID)
+
+  nsCanvasPrintState(nsICanvasRenderingContextInternal *aContext)
+      : mIsDone(false), mContext(aContext)
+  {
+  }
+
+  NS_IMETHOD GetContext(nsISupports **context)
+  {
+    printf("=== GetContext2\n");
+    NS_ADDREF(*context = mContext);
+    return NS_OK;
+  }
+
+  NS_IMETHOD Done()
+  {
+    printf("CPS::Done\n");
+    mIsDone = true;
+    return NS_OK;
+  }
+
+  bool mIsDone;
+  
+  NS_DECL_ISUPPORTS
+private:
+  ~nsCanvasPrintState() 
+  {
+  }
+
+  nsCOMPtr<nsICanvasRenderingContextInternal> mContext;
+protected:
+  /* additional members */
+};
+
+NS_DEFINE_STATIC_IID_ACCESSOR(nsCanvasPrintState, NS_ICANVASPRINTSTATE_IID) 
+
+NS_IMPL_ADDREF(nsCanvasPrintState)
+NS_IMPL_RELEASE(nsCanvasPrintState)
+
+DOMCI_DATA(CanvasPrintState, nsCanvasPrintState)
+
+NS_INTERFACE_MAP_BEGIN(nsCanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsCanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsICanvasPrintState)
+  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(CanvasPrintState)
+  NS_INTERFACE_MAP_ENTRY(nsISupports)
+NS_INTERFACE_MAP_END
+
+// ---------------------------------------------------------------------------
+
 nsGenericHTMLElement*
 NS_NewHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo,
                         FromParser aFromParser)
 {
   return new nsHTMLCanvasElement(aNodeInfo);
 }
 
 nsHTMLCanvasElement::nsHTMLCanvasElement(already_AddRefed<nsINodeInfo> aNodeInfo)
-  : nsGenericHTMLElement(aNodeInfo), mWriteOnly(false)
-{
+  : nsGenericHTMLElement(aNodeInfo), mIsReadyToPrint(false),
+    mPrintState(nsnull), mWriteOnly(false),
+    mIsPrintCanvas(false), mIsPrintPreview(false) {
 }
 
 nsHTMLCanvasElement::~nsHTMLCanvasElement()
 {
+  mPrintCallback = NULL;
+  mCurrentContext = NULL;
 }
 
 NS_IMPL_CYCLE_COLLECTION_CLASS(nsHTMLCanvasElement)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED(nsHTMLCanvasElement,
                                                   nsGenericHTMLElement)
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NSCOMPTR(mCurrentContext)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
@@ -147,28 +208,93 @@ nsHTMLCanvasElement::SetAttr(PRInt32 aNa
   {
     rv = UpdateContext();
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
   return rv;
 }
 
+bool
+nsHTMLCanvasElement::HandlePrintCallback(nsIntSize &size)
+{
+  printf("=== HandlePrintCallback\n");
+  // If the canvas is a printCanvas and the printing target is real paper,
+  // then the canvas is setup in nsSimplePageSequence::PrePagePrintNext().
+  if (!mIsPrintCanvas || !mIsPrintPreview) {
+    printf("=== handleprintcallback:early quit\n");
+    return true;
+  }
+
+  printf("=== HandlePrintCallback:continue\n");
+  nsresult rv;
+
+  // For print preview, resize the canvas context, such that
+  GetClientWidth(&size.width);
+  GetClientHeight(&size.height);
+
+  if (!mIsReadyToPrint) {
+    rv = mCurrentContext->AdjustToSize(size.width, size.height);
+
+    if (!NS_SUCCEEDED(rv))
+      return false;
+
+    mIsReadyToPrint = true;
+    CallPrintCallback();
+  }
+  return true;
+}
+
+void
+nsHTMLCanvasElement::CallPrintCallback()
+{
+  printf("=== CE::CallPrintCallback\n");
+  // ??? Any ADD_REF magic to be done here ???
+  mPrintState = new nsCanvasPrintState(mCurrentContext);
+  mPrintCallback->Render(mPrintState);
+
+ // nsRefPtr<nsICanvasPrintState> obj = new nsCanvasPrintState(mCurrentContext);
+ // mPrintCallback->Render(obj.forget().get());  
+}
+
+bool
+nsHTMLCanvasElement::IsPrintCallbackDone()
+{
+  printf("=== CE:IsPrintCallbackDone\n");
+  if (mPrintState == nsnull) {
+    return true;
+  }
+
+  return mPrintState->mIsDone;
+}
+
 nsresult
 nsHTMLCanvasElement::CopyInnerTo(nsGenericElement* aDest) const
 {
   nsresult rv = nsGenericHTMLElement::CopyInnerTo(aDest);
   NS_ENSURE_SUCCESS(rv, rv);
   if (aDest->OwnerDoc()->IsStaticDocument()) {
     nsHTMLCanvasElement* dest = static_cast<nsHTMLCanvasElement*>(aDest);
+    nsHTMLCanvasElement* self = const_cast<nsHTMLCanvasElement*>(this);
+
+    // By default, we assume this canvas will be displayed in PrintPreview.
+    dest->mIsPrintPreview = true;
+    dest->mPrintCallback = self->mPrintCallback;
+
+    // Mark the canvas to be a "PrintCanvas" in case there is a special
+    // rendering callback for printing.
+    if (dest->mPrintCallback) {
+      dest->mIsPrintCanvas = true;
+    }
+
     nsCOMPtr<nsISupports> cxt;
     dest->GetContext(NS_LITERAL_STRING("2d"), JSVAL_VOID, getter_AddRefs(cxt));
     nsCOMPtr<nsIDOMCanvasRenderingContext2D> context2d = do_QueryInterface(cxt);
     if (context2d) {
-      context2d->DrawImage(const_cast<nsHTMLCanvasElement*>(this),
+      context2d->DrawImage(self,
                            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
     }
   }
   return rv;
 }
 
 nsChangeHint
 nsHTMLCanvasElement::GetAttributeChangeHint(const nsIAtom* aAttribute,
@@ -242,16 +368,40 @@ nsHTMLCanvasElement::MozFetchAsStream(ns
 
   nsCOMPtr<nsIInputStreamCallback> asyncCallback;
   rv = NS_NewInputStreamReadyEvent(getter_AddRefs(asyncCallback), aCallback, mainThread);
   NS_ENSURE_SUCCESS(rv, rv);
 
   return asyncCallback->OnInputStreamReady(asyncData);
 }
 
+NS_IMETHODIMP
+nsHTMLCanvasElement::SetMozPrintCallback(nsIPrintCallback *aCallback)
+{
+  mPrintCallback = aCallback;
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsHTMLCanvasElement::GetMozPrintCallback(nsIPrintCallback** aCallback)
+{
+  return NS_OK;
+}
+/*
+NS_IMETHODIMP
+nsHTMLCanvasElement::SetMozPrintCallback(JSContext *cx, const jsval& callback)
+{
+  // Check that
+  if (JSVAL_IS_OBJECT(callback) && !JSVAL_IS_NULL(callback)) {
+    mPrintCallback = JSVAL_TO_OBJECT(callback);
+    NS_HOLD_JS_OBJECTS(this, mPrintCallback);
+  }
+}
+*/
+
 nsresult
 nsHTMLCanvasElement::ExtractData(const nsAString& aType,
                                  const nsAString& aOptions,
                                  nsIInputStream** aStream,
                                  bool& aFellBackToPNG)
 {
   // note that if we don't have a current context, the spec says we're
   // supposed to just return transparent black pixels of the canvas
@@ -498,17 +648,20 @@ nsHTMLCanvasElement::GetContextHelper(co
 
 NS_IMETHODIMP
 nsHTMLCanvasElement::GetContext(const nsAString& aContextId,
                                 const jsval& aContextOptions,
                                 nsISupports **aContext)
 {
   nsresult rv;
 
-  bool forceThebes = false;
+  // xxx force thebes if this is a print canvas.
+  // Remove this once the Azure backend has the right now not implemented
+  // functions for the printCanvas usecase ready.
+  bool forceThebes = mIsPrintCanvas;
 
   while (mCurrentContextId.IsEmpty()) {
     rv = GetContextHelper(aContextId, forceThebes, getter_AddRefs(mCurrentContext));
     NS_ENSURE_SUCCESS(rv, rv);
     if (!mCurrentContext) {
       return NS_OK;
     }
 
diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -1310,16 +1310,18 @@ static nsDOMClassInfoData sClassInfoData
   NS_DEFINE_CLASSINFO_DATA(CanvasGradient, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(CanvasPattern, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(TextMetrics, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(ImageData, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
+  NS_DEFINE_CLASSINFO_DATA(CanvasPrintState, nsDOMGenericSH,
+                           DOM_DEFAULT_SCRIPTABLE_FLAGS)
 
   NS_DEFINE_CLASSINFO_DATA(SmartCardEvent, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(PageTransitionEvent, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(WindowUtils, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 
@@ -3889,16 +3891,20 @@ nsDOMClassInfo::Init()
   DOM_CLASSINFO_MAP_BEGIN(TextMetrics, nsIDOMTextMetrics)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMTextMetrics)
   DOM_CLASSINFO_MAP_END
 
   DOM_CLASSINFO_MAP_BEGIN(ImageData, nsIDOMImageData)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMImageData)
   DOM_CLASSINFO_MAP_END
 
+  DOM_CLASSINFO_MAP_BEGIN(CanvasPrintState, nsICanvasPrintState)
+    DOM_CLASSINFO_MAP_ENTRY(nsICanvasPrintState)
+  DOM_CLASSINFO_MAP_END
+
   DOM_CLASSINFO_MAP_BEGIN(XSLTProcessor, nsIXSLTProcessor)
     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessor)
     DOM_CLASSINFO_MAP_ENTRY(nsIXSLTProcessorPrivate)
   DOM_CLASSINFO_MAP_END
 
   DOM_CLASSINFO_MAP_BEGIN(XPathEvaluator, nsIDOMXPathEvaluator)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathEvaluator)
   DOM_CLASSINFO_MAP_END
diff --git a/dom/base/nsDOMClassInfoClasses.h b/dom/base/nsDOMClassInfoClasses.h
--- a/dom/base/nsDOMClassInfoClasses.h
+++ b/dom/base/nsDOMClassInfoClasses.h
@@ -346,17 +346,18 @@ DOMCI_CLASS(SVGZoomEvent)
 
 // Canvas
 DOMCI_CLASS(HTMLCanvasElement)
 DOMCI_CLASS(CanvasRenderingContext2D)
 DOMCI_CLASS(CanvasGradient)
 DOMCI_CLASS(CanvasPattern)
 DOMCI_CLASS(TextMetrics)
 DOMCI_CLASS(ImageData)
-
+DOMCI_CLASS(CanvasPrintState)
+  
 // SmartCard Events
 DOMCI_CLASS(SmartCardEvent)
   
 // PageTransition Events
 DOMCI_CLASS(PageTransitionEvent)
 
 // WindowUtils
 DOMCI_CLASS(WindowUtils)
diff --git a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
--- a/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
+++ b/dom/interfaces/html/nsIDOMHTMLCanvasElement.idl
@@ -51,16 +51,28 @@
  *
  * @status UNDER_DEVELOPMENT
  */
 
 interface nsIDOMFile;
 interface nsIVariant;
 interface nsIInputStreamCallback;
 
+[scriptable, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a67)]
+interface nsICanvasPrintState : nsISupports {
+  readonly attribute nsISupports context;
+
+  void done();
+};
+
+[scriptable, function, uuid(8d5fb8a0-7782-11e1-b0c4-0800200c9a66)]
+interface nsIPrintCallback : nsISupports {
+  void render(in nsICanvasPrintState ctx);
+};
+
 [scriptable, uuid(5929542B-C68E-48AB-84F9-D9642DA39720)]
 interface nsIDOMHTMLCanvasElement : nsIDOMHTMLElement
 {
   attribute unsigned long width;
   attribute unsigned long height;
   attribute boolean mozOpaque;
 
   nsISupports getContext(in DOMString contextId,
@@ -83,10 +95,12 @@ interface nsIDOMHTMLCanvasElement : nsID
   // A Mozilla-only extension to get a canvas context backed by double-buffered
   // shared memory. Only privileged callers can call this.
   nsISupports MozGetIPCContext(in DOMString contextId);
 
   // A Mozilla-only extension that returns the canvas' image data as a data
   // stream in the desired image format.
   void mozFetchAsStream(in nsIInputStreamCallback callback,
                                         [optional] in DOMString type);
+
+  attribute nsIPrintCallback mozPrintCallback;
 };
 
diff --git a/gfx/thebes/gfxASurface.cpp b/gfx/thebes/gfxASurface.cpp
--- a/gfx/thebes/gfxASurface.cpp
+++ b/gfx/thebes/gfxASurface.cpp
@@ -389,16 +389,28 @@ gfxASurface::CheckSurfaceSize(const gfxI
     if (!tmp.valid()) {
         NS_WARNING("Allocation too large (would overflow)!");
         return false;
     }
 
     return true;
 }
 
+bool
+gfxASurface::GetFallbackResolution(double *aXPixPerInch, double *aYPixPerInch)
+{
+  if (mSurfaceValid) {
+    cairo_surface_get_fallback_resolution(mSurface, aXPixPerInch, aYPixPerInch);
+    return true;
+  } else {
+    return false;
+  }
+}
+
+
 /* static */
 PRInt32
 gfxASurface::FormatStrideForWidth(gfxImageFormat format, PRInt32 width)
 {
     return cairo_format_stride_for_width((cairo_format_t)format, (int)width);
 }
 
 nsresult
diff --git a/gfx/thebes/gfxASurface.h b/gfx/thebes/gfxASurface.h
--- a/gfx/thebes/gfxASurface.h
+++ b/gfx/thebes/gfxASurface.h
@@ -202,16 +202,19 @@ public:
     virtual PRInt32 GetDefaultContextFlags() const { return 0; }
 
     static gfxContentType ContentFromFormat(gfxImageFormat format);
     static gfxImageFormat FormatFromContent(gfxContentType format);
 
     void SetSubpixelAntialiasingEnabled(bool aEnabled);
     bool GetSubpixelAntialiasingEnabled();
 
+
+    bool GetFallbackResolution(double *aXPixPerInch, double *aYPixPerInch);
+
     /**
      * Record number of bytes for given surface type.  Use positive bytes
      * for allocations and negative bytes for deallocations.
      */
     static void RecordMemoryUsedForSurfaceType(gfxASurface::gfxSurfaceType aType,
                                                PRInt32 aBytes);
 
     /**
diff --git a/gfx/thebes/gfxContext.h b/gfx/thebes/gfxContext.h
--- a/gfx/thebes/gfxContext.h
+++ b/gfx/thebes/gfxContext.h
@@ -384,16 +384,18 @@ public:
      * Attempts to pixel snap the rectangle, add it to the current
      * path, and to set pattern as the current painting source.  This
      * should be used for drawing filled pixel-snapped rectangles (like
      * images), because the CTM at the time of the SetPattern call needs
      * to have a snapped translation, or you get smeared images.
      */
     void PixelSnappedRectangleAndSetPattern(const gfxRect& rect, gfxPattern *pattern);
 
+    bool GetFallbackResolution(double *aXPixPerInch, double *aYPixPerInch);
+
     /**
      ** Painting sources
      **/
 
     /**
      * Set a solid color to use for drawing.  This color is in the device color space
      * and is not transformed.
      */
diff --git a/layout/generic/nsHTMLCanvasFrame.cpp b/layout/generic/nsHTMLCanvasFrame.cpp
--- a/layout/generic/nsHTMLCanvasFrame.cpp
+++ b/layout/generic/nsHTMLCanvasFrame.cpp
@@ -288,16 +288,19 @@ already_AddRefed<Layer>
 nsHTMLCanvasFrame::BuildLayer(nsDisplayListBuilder* aBuilder,
                               LayerManager* aManager,
                               nsDisplayItem* aItem)
 {
   nsRect area = GetContentRect() - GetPosition() + aItem->ToReferenceFrame();
   nsHTMLCanvasElement* element = static_cast<nsHTMLCanvasElement*>(GetContent());
   nsIntSize canvasSize = GetCanvasSize();
 
+  if (!element->HandlePrintCallback(canvasSize))
+    return nsnull;
+
   if (canvasSize.width <= 0 || canvasSize.height <= 0 || area.IsEmpty())
     return nsnull;
 
   CanvasLayer* oldLayer = static_cast<CanvasLayer*>
     (aBuilder->LayerBuilder()->GetLeafLayerFor(aBuilder, aManager, aItem));
   nsRefPtr<CanvasLayer> layer = element->GetCanvasLayer(aBuilder, oldLayer, aManager);
   if (!layer)
     return nsnull;
diff --git a/layout/generic/nsIPageSequenceFrame.h b/layout/generic/nsIPageSequenceFrame.h
--- a/layout/generic/nsIPageSequenceFrame.h
+++ b/layout/generic/nsIPageSequenceFrame.h
@@ -65,16 +65,18 @@ public:
    *          NS_ERROR_INVALID_ARG if printing a range of pages (not all pages)
    *            and the start page is greater than the total number of pages
    *          NS_ERROR_FAILURE if there is an error
    */
   NS_IMETHOD StartPrint(nsPresContext*  aPresContext,
                         nsIPrintSettings* aPrintOptions,
                         PRUnichar* aDocTitle,
                         PRUnichar* aDocURL) = 0;
+
+  NS_IMETHOD PrePrintNextPage(bool *aDone) = 0;
   NS_IMETHOD PrintNextPage() = 0;
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum) = 0;
   NS_IMETHOD GetNumPages(PRInt32* aNumPages) = 0;
   NS_IMETHOD IsDoingPrintRange(bool* aDoing) = 0;
   NS_IMETHOD GetPrintRange(PRInt32* aFromPage, PRInt32* aToPage) = 0;
 
   NS_IMETHOD DoPageEnd() = 0;
   NS_IMETHOD SetSelectionHeight(nscoord aYOffset, nscoord aHeight) = 0;
diff --git a/layout/generic/nsSimplePageSequence.cpp b/layout/generic/nsSimplePageSequence.cpp
--- a/layout/generic/nsSimplePageSequence.cpp
+++ b/layout/generic/nsSimplePageSequence.cpp
@@ -45,16 +45,18 @@
 #include "nsIPrintSettings.h"
 #include "nsPageFrame.h"
 #include "nsStyleConsts.h"
 #include "nsRegion.h"
 #include "nsCSSFrameConstructor.h"
 #include "nsContentUtils.h"
 #include "nsDisplayList.h"
 #include "mozilla/Preferences.h"
+#include "nsHTMLCanvasFrame.h"
+#include "nsHTMLCanvasElement.h"
 
 // DateTime Includes
 #include "nsDateTimeFormatCID.h"
 
 #define OFFSET_NOT_SET -1
 
 // Print Options
 #include "nsIPrintOptions.h"
@@ -109,18 +111,20 @@ NS_NewSimplePageSequenceFrame(nsIPresShe
   return new (aPresShell) nsSimplePageSequenceFrame(aContext);
 }
 
 NS_IMPL_FRAMEARENA_HELPERS(nsSimplePageSequenceFrame)
 
 nsSimplePageSequenceFrame::nsSimplePageSequenceFrame(nsStyleContext* aContext) :
   nsContainerFrame(aContext),
   mTotalPages(-1),
+  mCurrentCanvasListSetup(false),
   mSelectionHeight(-1),
-  mYSelOffset(0)
+  mYSelOffset(0),
+  mCalledBeginPage(false)
 {
   nscoord halfInch = PresContext()->CSSTwipsToAppUnits(NS_INCHES_TO_TWIPS(0.5));
   mMargin.SizeTo(halfInch, halfInch, halfInch, halfInch);
 
   // XXX Unsafe to assume successful allocation
   mPageData = new nsSharedPageData();
   mPageData->mHeadFootFont =
     new nsFont(*PresContext()->GetDefaultFont(kGenericFont_serif,
@@ -514,55 +518,68 @@ nsSimplePageSequenceFrame::StartPrint(ns
 
   if (mTotalPages == -1) {
     mTotalPages = totalPages;
   }
 
   return rv;
 }
 
-NS_IMETHODIMP
-nsSimplePageSequenceFrame::PrintNextPage()
+void GetPrintCanvasElementsInFrame(nsTArray<nsRefPtr<nsHTMLCanvasElement> >* aArr, nsIFrame* aFrame)
 {
-  // Print each specified page
-  // pageNum keeps track of the current page and what pages are printing
-  //
-  // printedPageNum keeps track of the current page number to be printed
-  // Note: When print al the pages or a page range the printed page shows the
-  // actual page number, when printing selection it prints the page number starting
-  // with the first page of the selection. For example if the user has a 
-  // selection that starts on page 2 and ends on page 3, the page numbers when
-  // print are 1 and then two (which is different than printing a page range, where
-  // the page numbers would have been 2 and then 3)
 
-  if (mCurrentPageFrame == nsnull) {
-    return NS_ERROR_FAILURE;
+  for (nsIFrame::ChildListIterator childLists(aFrame);
+    !childLists.IsDone(); childLists.Next()) {
+
+    nsFrameList children = childLists.CurrentList();
+    for (nsFrameList::Enumerator e(children); !e.AtEnd(); e.Next()) {
+      nsIFrame* child = e.get();
+
+      // Check if child is a nsHTMLCanvasFrame.
+      nsHTMLCanvasFrame *canvasFrame = do_QueryFrame(child);
+
+      // If there is a canvasFrame, try to get actual canvas element.
+      if (canvasFrame) {
+        nsHTMLCanvasElement *canvas =
+          nsHTMLCanvasElement::FromContent(canvasFrame->GetContent());
+          // CanvasElementFromContent(canvasFrame->GetContent());
+
+        if (canvas && canvas->mIsPrintCanvas) {
+          aArr->AppendElement(canvas);
+          continue;
+        }
+      }
+      // The current child is not a nsHTMLCanvasFrame OR it is but there is
+      // no nsHTMLCanvasElement on it. Check if children of `child` might
+      // contain a nsHTMLCanvasElement.
+      GetPrintCanvasElementsInFrame(aArr, child);
+    }
   }
+}
+
+void
+nsSimplePageSequenceFrame::ComputePrintThisPage()
+{
+  // See whether we should print this page
+  mPrintThisPage = true;
 
   bool printEvenPages, printOddPages;
   mPageData->mPrintSettings->GetPrintOptions(nsIPrintSettings::kPrintEvenPages, &printEvenPages);
   mPageData->mPrintSettings->GetPrintOptions(nsIPrintSettings::kPrintOddPages, &printOddPages);
 
-  // Begin printing of the document
-  nsDeviceContext *dc = PresContext()->DeviceContext();
-
-  nsresult rv = NS_OK;
-
-  // See whether we should print this page
-  mPrintThisPage = true;
-
   // If printing a range of pages check whether the page number is in the
   // range of pages to print
   if (mDoingPageRange) {
     if (mPageNum < mFromPageNum) {
       mPrintThisPage = false;
     } else if (mPageNum > mToPageNum) {
       mPageNum++;
       mCurrentPageFrame = nsnull;
-      return NS_OK;
+      mPrintThisPage = false;
+      return;
     } else {
       PRInt32 length = mPageRanges.Length();
     
       // Page ranges are pairs (start, end)
       if (length && (length % 2 == 0)) {
         mPrintThisPage = false;
       
         PRInt32 i;
@@ -585,18 +602,137 @@ nsSimplePageSequenceFrame::PrintNextPage
     if (!printEvenPages) {
       mPrintThisPage = false;  // don't print even numbered page
     }
   }
   
   if (nsIPrintSettings::kRangeSelection == mPrintRangeType) {
     mPrintThisPage = true;
   }
+}
+
+NS_IMETHODIMP
+nsSimplePageSequenceFrame::PrePrintNextPage(bool* aDone)
+{
+  printf("--- SPSF::PrePrintNextPage : ENTER\n");
+  if (mCurrentPageFrame == nsnull) {
+    *aDone = true;
+    return NS_ERROR_FAILURE;
+  }
+  
+  ComputePrintThisPage();
+  // Nothing to do if the current page doesn't get printed OR rendering to
+  // preview. For preview, the `CallPrintCallback` is called from within the
+  // nsHTMLCanvasElement::HandlePrintCallback.
+  if (!mPrintThisPage || !PresContext()->IsRootPaginatedDocument()) {
+    *aDone = true;
+    return NS_OK;
+  }
+
+  printf("--- SPSF::PrePrintNextPage : CheckIfSetupList\n");
+
+
+  // If the canvasList is null, then generate it and start the render
+  // process for all the canvas.
+  if (!mCurrentCanvasListSetup) {
+    mCurrentCanvasListSetup = true;
+    GetPrintCanvasElementsInFrame(&mCurrentCanvasList, mCurrentPageFrame);
+
+    printf("=== GotCanvasList: %d \n", mCurrentCanvasList.Length()); 
+
+    nsRefPtr<gfxASurface> renderingSurface;
+    if (mCurrentCanvasList.Length() != 0) {
+      nsresult rv = NS_OK;
+
+      // Begin printing of the document
+      nsDeviceContext *dc = PresContext()->DeviceContext();
+      printf("=== Begin Page ===\n");
+      PR_PL(("\n"));
+      PR_PL(("***************** BeginPage *****************\n"));
+      rv = dc->BeginPage();
+      NS_ENSURE_SUCCESS(rv, rv);
+
+      mCalledBeginPage = true;
+      
+      nsRefPtr<nsRenderingContext> renderingContext;
+      dc->CreateRenderingContext(*getter_AddRefs(renderingContext));
+      NS_ENSURE_TRUE(renderingContext, NS_ERROR_OUT_OF_MEMORY);
+
+      renderingSurface =
+          renderingContext->ThebesContext()->CurrentSurface();
+      NS_ENSURE_TRUE(renderingSurface, NS_ERROR_OUT_OF_MEMORY);
+    }
+
+    for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
+      nsHTMLCanvasElement *canvas = mCurrentCanvasList[i];
+      nsIntSize size = canvas->GetSize();
+
+      nsRefPtr<gfxASurface> printSurface = renderingSurface->
+         CreateSimilarSurface(
+           gfxASurface::CONTENT_COLOR_ALPHA,
+           size
+         );
+
+      nsICanvasRenderingContextInternal *ctx = canvas->GetContextAtIndex(0);
+
+      if (!ctx)
+        continue;
+
+        // Initialize the context with the new printSurface.
+      ctx->InitializeWithSurface(NULL, printSurface, size.width, size.height);
+
+      // This canvas is not intended for preview. 
+      canvas->mIsPrintPreview = false;
+
+      // Start the rendering process.
+      canvas->CallPrintCallback();
+      printf(">>> Context: setup!\n");
+    }
+  }
+
+  PRInt32 doneCounter = 0;
+  for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
+    nsHTMLCanvasElement *canvas = mCurrentCanvasList[i];
+
+    if (canvas->IsPrintCallbackDone()) {
+      doneCounter++;
+    }
+  }
+
+  // If all canvas have finished rendering, return true, otherwise false.
+  *aDone = doneCounter == mCurrentCanvasList.Length();
+  return NS_OK;
+}
+
+NS_IMETHODIMP
+nsSimplePageSequenceFrame::PrintNextPage()
+{
+// Print each specified page
+// pageNum keeps track of the current page and what pages are printing
+//
+// printedPageNum keeps track of the current page number to be printed
+// Note: When print al the pages or a page range the printed page shows the
+// actual page number, when printing selection it prints the page number starting
+// with the first page of the selection. For example if the user has a 
+// selection that starts on page 2 and ends on page 3, the page numbers when
+// print are 1 and then two (which is different than printing a page range, where
+// the page numbers would have been 2 and then 3)
+
+  if (mCurrentPageFrame == nsnull) {
+    return NS_ERROR_FAILURE;
+  }
+
+  nsresult rv = NS_OK;
+
+  ComputePrintThisPage();
 
   if (mPrintThisPage) {
+    // Begin printing of the document
+    nsDeviceContext *dc = PresContext()->DeviceContext();
+
     // XXX This is temporary fix for printing more than one page of a selection
     // This does a poor man's "dump" pagination (see Bug 89353)
     // It has laid out as one long page and now we are just moving or view up/down 
     // one page at a time and printing the contents of what is exposed by the rect.
     // currently this does not work for IFrames
     // I will soon improve this to work with IFrames 
     bool    continuePrinting = true;
     nscoord width, height;
@@ -613,70 +749,95 @@ nsSimplePageSequenceFrame::PrintNextPage
 
     // cast the frame to be a page frame
     nsPageFrame * pf = static_cast<nsPageFrame*>(mCurrentPageFrame);
     pf->SetPageNumInfo(mPageNum, mTotalPages);
     pf->SetSharedPageData(mPageData);
 
     PRInt32 printedPageNum = 1;
     while (continuePrinting) {
+      printf("=== LOOP:ITER ===");
       if (PresContext()->IsRootPaginatedDocument()) {
-        PR_PL(("\n"));
-        PR_PL(("***************** BeginPage *****************\n"));
-        rv = dc->BeginPage();
-        NS_ENSURE_SUCCESS(rv, rv);
+        if (!mCalledBeginPage) {
+          printf("=== Begin Page ===\n");
+          PR_PL(("\n"));
+          PR_PL(("***************** BeginPage *****************\n"));
+          rv = dc->BeginPage();
+          NS_ENSURE_SUCCESS(rv, rv);
+        } else {
+          mCalledBeginPage = false;
+        }
       }
 
       PR_PL(("SeqFr::PrintNextPage -> %p PageNo: %d", pf, mPageNum));
 
       nsRefPtr<nsRenderingContext> renderingContext;
       dc->CreateRenderingContext(*getter_AddRefs(renderingContext));
       NS_ENSURE_TRUE(renderingContext, NS_ERROR_OUT_OF_MEMORY);
 
       nsRect drawingRect(nsPoint(0, 0),
                          mCurrentPageFrame->GetSize());
       nsRegion drawingRegion(drawingRect);
+
+
+      // Replace the underlaying context off all canvas that are "printCanvas".
+      nsRefPtr<gfxASurface> renderingSurface =
+          renderingContext->ThebesContext()->CurrentSurface();
+
       nsLayoutUtils::PaintFrame(renderingContext, mCurrentPageFrame,
                                 drawingRegion, NS_RGBA(0,0,0,0),
                                 nsLayoutUtils::PAINT_SYNC_DECODE_IMAGES);
 
       if (mSelectionHeight >= 0 && selectionY < mSelectionHeight) {
         selectionY += height;
         printedPageNum++;
         pf->SetPageNumInfo(printedPageNum, mTotalPages);
         conFrame->SetPosition(conFrame->GetPosition() + nsPoint(0, -height));
         nsContainerFrame::PositionChildViews(conFrame);
 
         PR_PL(("***************** End Page (PrintNextPage) *****************\n"));
         rv = dc->EndPage();
+        printf("=== End Page ===");
         NS_ENSURE_SUCCESS(rv, rv);
       } else {
         continuePrinting = false;
       }
     }
+    printf("=== LOOP:EXIT ===");
   }
   return rv;
 }
 
 NS_IMETHODIMP
 nsSimplePageSequenceFrame::DoPageEnd()
 {
   nsresult rv = NS_OK;
   if (PresContext()->IsRootPaginatedDocument() && mPrintThisPage) {
     PR_PL(("***************** End Page (DoPageEnd) *****************\n"));
     rv = PresContext()->DeviceContext()->EndPage();
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
+  // Loop over the canvasList list again and clear out the no longer
+  // needed surface and context to save memeory.
+  for (PRInt32 i = mCurrentCanvasList.Length() - 1; i >= 0 ; i--) {
+    nsICanvasRenderingContextInternal *ctx = mCurrentCanvasList[i]->GetContextAtIndex(0);
+
+    if (ctx)
+      ctx->Reset();
+  }
+  mCurrentCanvasList.Clear();
+  mCurrentCanvasListSetup = false; 
+
   mPageNum++;
 
   if (mCurrentPageFrame) {
     mCurrentPageFrame = mCurrentPageFrame->GetNextSibling();
   }
-  
+
   return rv;
 }
 
 static void PaintPageSequence(nsIFrame* aFrame, nsRenderingContext* aCtx,
                              const nsRect& aDirtyRect, nsPoint aPt)
 {
   static_cast<nsSimplePageSequenceFrame*>(aFrame)->PaintPageSequence(*aCtx, aDirtyRect, aPt);
 }
diff --git a/layout/generic/nsSimplePageSequence.h b/layout/generic/nsSimplePageSequence.h
--- a/layout/generic/nsSimplePageSequence.h
+++ b/layout/generic/nsSimplePageSequence.h
@@ -37,16 +37,17 @@
 #ifndef nsSimplePageSequence_h___
 #define nsSimplePageSequence_h___
 
 #include "nsIPageSequenceFrame.h"
 #include "nsContainerFrame.h"
 #include "nsIPrintSettings.h"
 #include "nsIPrintOptions.h"
 #include "nsIDateTimeFormat.h"
+#include "nsHTMLCanvasElement.h"
 
 //-----------------------------------------------
 // This class maintains all the data that 
 // is used by all the page frame
 // It lives while the nsSimplePageSequenceFrame lives
 class nsSharedPageData {
 public:
   nsSharedPageData();
@@ -103,16 +104,18 @@ public:
   // For Shrink To Fit
   NS_IMETHOD GetSTFPercent(float& aSTFPercent);
 
   // Async Printing
   NS_IMETHOD StartPrint(nsPresContext*  aPresContext,
                         nsIPrintSettings* aPrintSettings,
                         PRUnichar*        aDocTitle,
                         PRUnichar*        aDocURL);
+
+  NS_IMETHOD PrePrintNextPage(bool *aDone);
   NS_IMETHOD PrintNextPage();
   NS_IMETHOD GetCurrentPageNum(PRInt32* aPageNum);
   NS_IMETHOD GetNumPages(PRInt32* aNumPages);
   NS_IMETHOD IsDoingPrintRange(bool* aDoing);
   NS_IMETHOD GetPrintRange(PRInt32* aFromPage, PRInt32* aToPage);
   NS_IMETHOD DoPageEnd();
 
   // We must allow Print Preview UI to have a background, no matter what the
@@ -161,22 +164,28 @@ protected:
   // Asynch Printing
   nsIFrame *   mCurrentPageFrame;
   PRInt32      mPageNum;
   PRInt32      mTotalPages;
   PRInt32      mPrintRangeType;
   PRInt32      mFromPageNum;
   PRInt32      mToPageNum;
   nsTArray<PRInt32> mPageRanges;
+  nsTArray<nsRefPtr<nsHTMLCanvasElement> > mCurrentCanvasList;
+
+  bool         mCurrentCanvasListSetup;
+  void         ComputePrintThisPage();
 
   // Selection Printing Info
   nscoord      mSelectionHeight;
   nscoord      mYSelOffset;
 
   // Asynch Printing
   bool mPrintThisPage;
   bool mDoingPageRange;
 
   bool mIsPrintingSelection;
+  
+  bool mCalledBeginPage;
 };
 
 #endif /* nsSimplePageSequence_h___ */
 
diff --git a/layout/printing/nsPagePrintTimer.cpp b/layout/printing/nsPagePrintTimer.cpp
--- a/layout/printing/nsPagePrintTimer.cpp
+++ b/layout/printing/nsPagePrintTimer.cpp
@@ -90,23 +90,30 @@ nsPagePrintTimer::StartTimer(bool aUseDe
 NS_IMETHODIMP
 nsPagePrintTimer::Notify(nsITimer *timer)
 {
   if (mDocViewerPrint) {
     bool initNewTimer = true;
     // Check to see if we are done
     // inRange will be true if a page is actually printed
     bool inRange;
-    // donePrinting will be true if it completed successfully or
-    // if the printing was cancelled
-    bool donePrinting = mPrintEngine->PrintPage(mPrintObj, inRange);
-    if (donePrinting) {
-      // now clean up print or print the next webshell
-      if (mPrintEngine->DonePrintingPages(mPrintObj, NS_OK)) {
-        initNewTimer = false;
+
+    bool donePrePrint = mPrintEngine->PrePrintPage();
+    bool donePrinting;
+
+    if (donePrePrint) {
+      printf("--- donePrePrint!\n");
+      // donePrinting will be true if it completed successfully or
+      // if the printing was cancelled
+      bool donePrinting = mPrintEngine->PrintPage(mPrintObj, inRange);
+      if (donePrinting) {
+        // now clean up print or print the next webshell
+        if (mPrintEngine->DonePrintingPages(mPrintObj, NS_OK)) {
+          initNewTimer = false;
+        }
       }
     }
 
     // Note that the Stop() destroys this after the print job finishes
     // (The PrintEngine stops holding a reference when DonePrintingPages
     // returns true.)
     Stop(); 
     if (initNewTimer) {
diff --git a/layout/printing/nsPrintEngine.cpp b/layout/printing/nsPrintEngine.cpp
--- a/layout/printing/nsPrintEngine.cpp
+++ b/layout/printing/nsPrintEngine.cpp
@@ -2427,16 +2427,42 @@ nsPrintEngine::ElipseLongString(PRUnicha
       nsMemory::Free(aStr);
       aStr = ToNewUnicode(newStr);
     }
   }
 }
 
 //-------------------------------------------------------
 bool
+nsPrintEngine::PrePrintPage()
+{
+  NS_ASSERTION(mPageSeqFrame,  "mPageSeqFrame is null!");
+  NS_ASSERTION(mPrt,           "mPrt is null!");
+
+  // Although these should NEVER be NULL
+  // This is added insurance, to make sure we don't crash in optimized builds
+  if (!mPrt || !mPageSeqFrame) {
+    return true; // means we are done preparing the page.
+  }
+
+   
+  // Check setting to see if someone request it be cancelled
+  bool isCancelled = false;
+  mPrt->mPrintSettings->GetIsCancelled(&isCancelled);
+  if (isCancelled)
+    return true;
+
+  // Ask mPageSeqFrame if the page is ready to be printed.
+  // If the page doesn't get printed at all, the function will return true.
+  bool done = false;
+  mPageSeqFrame->PrePrintNextPage(&done);
+  return done;
+}
+
+bool
 nsPrintEngine::PrintPage(nsPrintObject*    aPO,
                          bool&           aInRange)
 {
   NS_ASSERTION(aPO,            "aPO is null!");
   NS_ASSERTION(mPageSeqFrame,  "mPageSeqFrame is null!");
   NS_ASSERTION(mPrt,           "mPrt is null!");
 
   // Although these should NEVER be NULL
diff --git a/layout/printing/nsPrintEngine.h b/layout/printing/nsPrintEngine.h
--- a/layout/printing/nsPrintEngine.h
+++ b/layout/printing/nsPrintEngine.h
@@ -129,16 +129,17 @@ public:
 
   void SetPrintPO(nsPrintObject* aPO, bool aPrint);
 
   void TurnScriptingOn(bool aDoTurnOn);
   bool CheckDocumentForPPCaching();
   void InstallPrintPreviewListener();
 
   // nsIDocumentViewerPrint Printing Methods
+  bool     PrePrintPage();
   bool     PrintPage(nsPrintObject* aPOect, bool& aInRange);
   bool     DonePrintingPages(nsPrintObject* aPO, nsresult aResult);
 
   //---------------------------------------------------------------------
   void BuildDocTree(nsIDocShellTreeNode *      aParentNode,
                     nsTArray<nsPrintObject*> * aDocList,
                     nsPrintObject *            aPO);
   nsresult ReflowDocList(nsPrintObject * aPO, bool aSetPixelScale);
